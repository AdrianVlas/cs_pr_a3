###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       24/Mar/2017  12:54:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\v_A_shm\low_level_init.c
#    Command line =  
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\v_A_shm\low_level_init.c" -D USE_STDPERIPH_DRIVER -D STM32F2XX
#        -D USE_USB_OTG_FS -D KEYBOARD_VER_1 -D SYSTEM_VIEWER_ENABLE -lc
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List" --remarks -o
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --enable_multibytes --fpu=None
#        --dlib_config G:\PRG\IAR7_50_2\arm\INC\c\DLib_Config_Full.h -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\usb\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Core\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\"
#        -I "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\Config\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\OS\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\SEGGER\" -On --use_c++_inline
#        --require_prototypes -I G:\PRG\IAR7_50_2\arm\CMSIS\Include\ -D
#        ARM_MATH_CM3
#    List file    =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List\low_level_init.lst
#    Object file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj\low_level_init.o
#
###############################################################################

G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working files\v_A_shm\low_level_init.c
      1          #include "header.h"
      2          #include "../inc/libraries.h"
      3          
      4          
      5          /**************************************/
      6          //ӥ񲳢ᮭ󠧮㭳𭼮ߠSRAM
      7          /**************************************/
      8          inline void test_external_SRAM(void)
      9          {
     10            //è讠ภ۬ԫ𪳱򼠤㯵⡩򨵠񫳢
     11            unsigned int size_SRAM_word = (((unsigned int)&__ICFEDIT_region_RAM1_size__) + 1) >> 1;
     12            
     13            //è讠󠺬롧Ԣ ௷ᳮꡧԸߠﰥ𠲨㮮ߠ࡬'󲳍
     14             unsigned short int *point = ((unsigned short int *)&__ICFEDIT_region_RAM1_start__);
     15            
     16            //Ƞ௢󸏦믬԰볠询񞁻􈀥𠲨㮮ߠ࡬'󲳠߿ ᥰ沮򍊠 for (unsigned int i = 0; i < size_SRAM_word; i++) *point++ = (unsigned short int)(i & 0xffff);
     17            
     18            //Х𥢳𿺬󨲳㡭, 󨠳 㱳񠪮촰롵 ౮ੱ᭳ 򳠷鲫ଠ󪳠򘏯汥宼ᰨ񠫨
     19            unsigned int error = 0, i = 0;
     20            point = ((unsigned short int *)&__ICFEDIT_region_RAM1_start__);
     21            while((i < size_SRAM_word) && (error == 0))
     22            {
     23              if ((*point) == ((unsigned short int)(i & 0xffff)))
     24              {
     25                //ӥ񲠤ᮮߠ믬԰먠౮깮⡢填      i++;
     26                *point++ = 0;
     27              }
     28              else
     29              {
     30                //ӥ񲠤ᮮߠ믬԰먠౮깮⡢填      
     31                error = 0xff;
     32                //è񲠢쿺󸏢Ԥﭫ殭󠯰ﭨ쫳 򥱲󠧮㭳𼮿 ﰥ𠲨㮮ߠ࡬'󲳍
     33                _SET_BIT(set_diagnostyka, ERROR_EXTERNAL_SRAM_BIT);
     34              }
     35            }
     36          }
     37          /**************************************/
     38          
     39          
     40          
     41          
     42          
     43          
     44          
     45          #ifdef __cplusplus
     46          extern "C" {
     47          #endif
     48          
     49          #pragma language=extended
     50          
     51          __interwork int __low_level_init(void);
     52          
     53          __interwork int __low_level_init(void)
     54          {
     55            /*==================================*/
     56            /*  Initialize hardware.            */
     57            /*==================================*/
     58          FSMC_SRAM_Init();
     59            /**********************/
     60            //Π񲰮򢠭ﴭԢ ౮򥱮𠍊  /**********************/
     61            GPIO_InitTypeDef GPIO_InitStructure;
     62          
     63          GPIO_InitStructure.GPIO_Pin = GPIO_PIN_EXTERNAL_WATCHDOG;
     64            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     65            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     66            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     67            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
     68            GPIO_Init(GPIO_EXTERNAL_WATCHDOG, &GPIO_InitStructure);
     69            /* ȭԬ໬ԭ 询񞍮䮠Watchdog */
     70            GPIO_ResetBits(GPIO_EXTERNAL_WATCHDOG, GPIO_PIN_EXTERNAL_WATCHDOG);
     71              /**********************/
     72            //ӥ񲳺󸏢񞎠SRAM
     73            /**********************/
     74            test_external_SRAM();
     75            /**********************/
     76            
     77            //Ȭԭ򺬮 񲠭 ᴲ󠧮㭳𭼮䮠Watchdog ౮򨫥箨鍊
     78            GPIO_WriteBit(
     79                          GPIO_EXTERNAL_WATCHDOG,
     80                          GPIO_PIN_EXTERNAL_WATCHDOG,
     81                          (BitAction)(1 - GPIO_ReadOutputDataBit(GPIO_EXTERNAL_WATCHDOG, GPIO_PIN_EXTERNAL_WATCHDOG))
     82                         );
     83              
     84            /*==================================*/
     85            /* Choose if segment initialization */
     86            /* should be done or not.           */
     87            /* Return: 0 to omit seg_init       */
     88            /*         1 to run seg_init        */
     89            /*==================================*/
     90            return 1;
     91          }
     92          
     93          #pragma language=default
     94          
     95          #ifdef __cplusplus
     96          }
     97          #endif
     98          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   __low_level_init
        16   -> FSMC_SRAM_Init
        16   -> GPIO_Init
        16   -> GPIO_ReadOutputDataBit
        16   -> GPIO_ResetBits
        16   -> GPIO_WriteBit
        16   -> test_external_SRAM
       8   test_external_SRAM


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  __low_level_init
      76  test_external_SRAM

 
 172 bytes in section .text
 
 96 bytes of CODE memory (+ 76 bytes shared)

Errors: none
Warnings: none
