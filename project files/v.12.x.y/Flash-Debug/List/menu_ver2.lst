###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       24/Mar/2017  12:54:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\inc\menu_ver2.c
#    Command line =  
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\inc\menu_ver2.c" -D USE_STDPERIPH_DRIVER -D STM32F2XX -D
#        USE_USB_OTG_FS -D KEYBOARD_VER_1 -D SYSTEM_VIEWER_ENABLE -lc
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List" --remarks -o
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --enable_multibytes --fpu=None
#        --dlib_config G:\PRG\IAR7_50_2\arm\INC\c\DLib_Config_Full.h -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\usb\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Core\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\"
#        -I "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\Config\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\OS\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\SEGGER\" -On --use_c++_inline
#        --require_prototypes -I G:\PRG\IAR7_50_2\arm\CMSIS\Include\ -D
#        ARM_MATH_CM3
#    List file    =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List\menu_ver2.lst
#    Object file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj\menu_ver2.o
#
###############################################################################

G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working files\inc\menu_ver2.c
      1          #include "header.h"
      2          
      3          /*****************************************************/
      4          //Функція меню з якої здійснюються всі інші операції
      5          /*****************************************************/
      6          void main_manu_function_ver2(void)
      7          {
      8            //Перевіряємо чи якась кнопка натиснута
      9            if (current_state_menu2.edition == ED_ERROR) 
     10            {
     11              const uint8_t name_string_error[MAX_NAMBER_LANGUAGE][2][MAX_COL_LCD + 1] = 
     12              {
     13                {
     14                  " Дин.пам.недост.",
     15                  " Перезап.прибор "
     16                },
     17                {
     18                  " Дин.пам.недост.",
     19                  " Перезап.прилад "
     20                  ""
     21                },
     22                {
     23                  " Дин.пам.недост.",
     24                  " Restart device "
     25                },
     26                {
     27                  " Дин.пам.недост.",
     28                  " Перезап.прибор "
     29                }
     30              };
     31              int index_language = index_language_in_array(select_struct_settings_fix()->language);
     32              
     33              //Копіюємо  рядки у робочий екран
     34              for (size_t i = 0; i < MAX_ROW_LCD; i++)
     35              {
     36                for (size_t j = 0; j < MAX_COL_LCD; j++) working_ekran[i][j] = (i < 2) ? name_string_error[index_language][i][j] : ' ';
     37              }
     38            
     39              //Курсор невидимий
     40              current_state_menu2.cursor_on = 0;
     41              //Курсор не мигає
     42              current_state_menu2.cursor_blinking_on = 0;
     43              //Обновити повністю весь екран
     44              current_state_menu2.current_action = ACTION_WITH_CARRENT_EKRANE_FULL_UPDATE;
     45            }
     46            else if (new_state_keyboard !=0)
     47            {
     48          //    static enum _edition_stats prev_edit;
     49              
     50              unsigned int max_row;
     51              if (current_state_menu2.p_max_row == NULL) max_row = current_state_menu2.max_row;
     52              else
     53              {
     54                if (current_state_menu2.max_row == 0) max_row = *current_state_menu2.p_max_row;
     55                else 
     56                {
     57                  int number_ln =  *current_state_menu2.p_max_row;
     58                  max_row = ((number_ln != 0) && (current_state_menu2.number_selection < number_ln))*current_state_menu2.max_row;
     59                }
     60              }
     61          
     62              if (max_row == 0) 
     63              {
     64                /*
     65                Якщо при певних одбставинвах (на приклад зміна конфігурації з верхнього рівня) 
     66                кількість рядків вибраному меню стала ріна 0, то попертаємо у попереднє меню 
     67                (немов би натиснута конпка ESC) і до того часу, поки ми не увійдемо у таке меню, 
     68                де можна відобразити його вміст
     69                */
     70                new_state_keyboard = (1<<BIT_KEY_ESC);
     71              }
     72              
     73              unsigned int action;
     74              switch (current_state_menu2.current_level)
     75              {
     76              case PASSWORD_MENU2_LEVEL:
     77                {
     78                  //Зміння для фіксації стану курсору з попреднього рівня меню
     79                  static __PREVIOUS_STATE_CURSOR previous_state_cursor;
     80                  //Змінні для фіксації введеного паролю
     81                  static unsigned int new_password;
     82                  static unsigned int number_symbols;
     83                  
     84                  //Очищаємо всі біти краім упралінських
     85                  new_state_keyboard &= (1<<BIT_KEY_ENTER)|(1<<BIT_KEY_ESC)|(1<<BIT_KEY_UP)|(1<<BIT_KEY_DOWN)|(1<<BIT_KEY_RIGHT)|(1<<BIT_KEY_LEFT)|(1<<BIT_REWRITE);
     86          
     87                  if (new_state_keyboard !=0)
     88                  {
     89                    //Пріоритет стоїть на обновлені екрану
     90                    if ( (action = (new_state_keyboard & (1<<BIT_REWRITE ))) !=0)
     91                    {
     92                      previous_state_cursor.position_cursor_x = current_state_menu2.position_cursor_x;              
     93                      previous_state_cursor.cursor_on = current_state_menu2.cursor_on;
     94                      previous_state_cursor.cursor_blinking_on = current_state_menu2.cursor_blinking_on;
     95                      current_state_menu2.position_cursor_x = COL_NEW_PASSWORD_BEGIN;
     96                      position_in_current_level_menu2[current_state_menu2.current_level] = 1;
     97                      //Скидаємо новий пароль у нуль і скидаємо кількість введених символів
     98                      new_password = 0;
     99                      number_symbols = 0;
    100                      
    101                      //Формуємо екран відображення
    102                      p_menu_param_1 = &new_password;
    103                      unsigned int view = false;
    104                      p_menu_param_2 = &view;
    105                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    106                      else
    107                      {
    108                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    109                        total_error_sw_fixed(100);
    110                      }
    111                      //Очищаємо біт обновлення екрану
    112                      new_state_keyboard &= (unsigned int)(~action);
    113                    }
    114                    else if (
    115                             ((action = (new_state_keyboard & (1<<BIT_KEY_UP   ))) !=0) ||
    116                             ((action = (new_state_keyboard & (1<<BIT_KEY_DOWN ))) !=0) ||
    117                             ((action = (new_state_keyboard & (1<<BIT_KEY_RIGHT))) !=0) ||
    118                             ((action = (new_state_keyboard & (1<<BIT_KEY_LEFT ))) !=0)
    119                            )   
    120                    {
    121                      unsigned int chosen_number;
    122                      if      (action & (1<<BIT_KEY_UP   )) chosen_number = 1;
    123                      else if (action & (1<<BIT_KEY_RIGHT)) chosen_number = 2;
    124                      else if (action & (1<<BIT_KEY_DOWN )) chosen_number = 3;
    125                      else if (action & (1<<BIT_KEY_LEFT )) chosen_number = 4;
    126                      else
    127                      {
    128                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    129                        total_error_sw_fixed(44);
    130                      }
    131                        
    132                      new_password = new_password*10 + chosen_number;
    133                      number_symbols++;
    134                      current_state_menu2.position_cursor_x++;
    135                        
    136                      //Формуємо екран відображення
    137                      unsigned int view = true;
    138                      p_menu_param_2 = &view;
    139                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    140                      else
    141                      {
    142                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    143                        total_error_sw_fixed(101);
    144                      }
    145                        
    146                      //Очистити сигналізацію, що натиснута кнопка 
    147                      new_state_keyboard &= (unsigned int)(~action);
    148                        
    149                      //Перевіряємо чи не натиснуто максимальну кількість символів для паролю (4) і якщо це так, то автоматично приймаємо його
    150                      if (number_symbols >= MAX_NUMBER_OF_SYMPOLS_IN_PASSWORD) new_state_keyboard |= (1<<BIT_KEY_ENTER);
    151                    }
    152                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ENTER))) !=0)
    153                    {
    154                      //Натиснута кнопка ENTER
    155          
    156                      if (
    157                          (new_password == settings_fix_prt.password_2) ||
    158                          (
    159                           (new_password == settings_fix_prt.password_1) &&
    160                           (
    161                            (next_level_in_current_level_menu2[current_state_menu2.current_level] != SET_NEW_PASSWORD_MENU2_LEVEL)
    162                           ) 
    163                          )   
    164                         )   
    165                      {
    166                        //Пароль зійшовся
    167                        //Формуємо індекс повернення з нового вікна у яке ми зараз перейдемо на вікно з якого був викликаний запит на пароль
    168                        if (next_level_in_current_level_menu2[current_state_menu2.current_level] != previous_level_in_current_level_menu2[current_state_menu2.current_level])
    169                        {
    170                          previous_level_in_current_level_menu2[next_level_in_current_level_menu2[current_state_menu2.current_level]] = previous_level_in_current_level_menu2[current_state_menu2.current_level];
    171                        }
    172                        current_state_menu2.current_level = next_level_in_current_level_menu2[current_state_menu2.current_level];
    173          
    174                        if (new_password == settings_fix_prt.password_2)
    175                        {
    176                          if (
    177                              (current_state_menu2.current_level == TIME_MANU2_LEVEL) ||
    178                              (config_settings_modified == 0)
    179                             )   
    180                          {
    181                            current_state_menu2.edition = ED_EDITION;
    182                            if (current_state_menu2.current_level != TIME_MANU2_LEVEL) 
    183                            {
    184                              //Фіксуємо, що система меню захопила "монополію" на зміну конфігурації і налаштувань
    185                              config_settings_modified = MASKA_MENU_LOCKS;
    186                            }
    187                          }
    188                          else 
    189                          {
    190                            if (current_state_menu2.current_level == SET_NEW_PASSWORD_MENU2_LEVEL)
    191                            {
    192                              current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
    193                            }
    194                            current_state_menu2.edition = ED_WARNING_EDITION_BUSY;
    195                          }
    196                        }
    197                        else current_state_menu2.edition = ED_VIEWING;
    198                      }
    199                      else
    200                      {
    201                        //Пароль не зійшовся, або по Паролю1 у це вікно заходити не можна (наприклад вікно "зміна паролю")
    202                        enum _menu2_levels temp_value_level = current_state_menu2.current_level;
    203                        do
    204                        {
    205                          temp_value_level = previous_level_in_current_level_menu2[temp_value_level];
    206                        }
    207                        while(
    208                              (new_password != settings_fix_prt.password_1) &&
    209                              (temp_value_level >= __BEGIN_SETTINGS_MENU2_LEVEL) &&
    210                              (temp_value_level <  __NEXT_AFTER_SETTINGS_MENU2_LEVEL)
    211                             );
    212                        current_state_menu2.current_level = temp_value_level;
    213                        
    214                        current_state_menu2.edition = /*prev_edit*/ED_VIEWING;
    215                        
    216                        if ((config_settings_modified & MASKA_MENU_LOCKS) != 0 ) 
    217                        {
    218                          /*
    219                          Хоч, теоретично, цього випадку тут би ніколи не мало б бути, бо, 
    220                          коли ми вже захопили "монополію" на зміну налаштувань+ конфігурації,
    221                           то запит на пароль не мав би з'являтися
    222                          */
    223                          config_settings_modified = 0;
    224                        }
    225                      }
    226                      current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
    227                      current_state_menu2.position_cursor_x = previous_state_cursor.position_cursor_x;
    228                      current_state_menu2.cursor_on = previous_state_cursor.cursor_on;
    229                      current_state_menu2.cursor_blinking_on = previous_state_cursor.cursor_blinking_on;
    230                      new_level_menu();
    231                        
    232                      //Виставляємо біт обновлення екрану
    233                      new_state_keyboard |= (1<<BIT_REWRITE);
    234          
    235                      //Очистити сигналізацію, що натиснута кнопка 
    236                      new_state_keyboard &= (unsigned int)(~action);
    237                    }
    238                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ESC))) !=0)
    239                    {
    240                      //Натиснута кнопка ESC
    241          
    242                      //Переходимо у попереднє меню з попереднім режимом редагування
    243                      current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
    244                      current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
    245                      current_state_menu2.position_cursor_x = previous_state_cursor.position_cursor_x;
    246                      current_state_menu2.cursor_on = previous_state_cursor.cursor_on;
    247                      current_state_menu2.cursor_blinking_on = previous_state_cursor.cursor_blinking_on;
    248                      current_state_menu2.edition = /*prev_edit*/ED_VIEWING;
    249                      new_level_menu();
    250                        
    251                      //Виставляємо біт обновлення екрану
    252                      new_state_keyboard |= (1<<BIT_REWRITE);
    253          
    254                      //Очистити сигналізацію, що натиснута кнопка 
    255                      new_state_keyboard &= (unsigned int)(~action);
    256                    }
    257                    else
    258                    {
    259                      //Натиснуто зразу декілька кнопок - це є невизначена ситуація, тому скидаємо сигналізацію про натиснуті кнопки і чекаємо знову
    260                      unsigned int temp_data = new_state_keyboard;
    261                      new_state_keyboard &= ~temp_data;
    262                    }
    263                  }
    264                  break;
    265                }
    266              case SET_NEW_PASSWORD_MENU2_LEVEL:
    267                {
    268                  //Змінні для фіксації введеного паролю
    269                  static int number_symbols;
    270                  
    271                  //Очищаємо всі біти краім упралінських
    272                  new_state_keyboard &= (1<<BIT_KEY_ENTER)|(1<<BIT_KEY_ESC)|(1<<BIT_KEY_UP)|(1<<BIT_KEY_DOWN)|(1<<BIT_KEY_RIGHT)|(1<<BIT_KEY_LEFT)|(1<<BIT_REWRITE);
    273          
    274                  uint32_t *p_password_cont, *p_password_edit;
    275                  switch (current_state_menu2.number_selection)
    276                  {
    277                  case INDEX_LIST_PASSWORDS_M2_1:
    278                    {
    279                      p_password_cont = &settings_fix.password_1;
    280                      p_password_edit = &settings_fix_edit.password_1;
    281                      break;
    282                    }
    283                  case INDEX_LIST_PASSWORDS_M2_2:
    284                    {
    285                      p_password_cont = &settings_fix.password_2;
    286                      p_password_edit = &settings_fix_edit.password_2;
    287                      break;
    288                    }
    289                  default:
    290                    {
    291                      //Теоретично цього ніколи не мало б бути
    292                      total_error_sw_fixed(108);
    293                    }
    294                  }
    295                    
    296                  if (
    297                      ((action = (new_state_keyboard & (1 << BIT_KEY_ENTER))) !=0) ||
    298                      ((action = (new_state_keyboard & (1 << BIT_KEY_ESC  ))) !=0)
    299                     )   
    300                  {
    301                    if (action == (1 << BIT_KEY_ENTER))
    302                    {
    303                      if (*p_password_edit != *p_password_cont)
    304                      {
    305                        *p_password_cont = *p_password_edit;
    306                        config_settings_modified |= MASKA_CHANGED_SETTINGS;
    307                      }
    308                    }
    309                    else
    310                    {
    311                      *p_password_edit = *p_password_cont;
    312                    }
    313                      
    314                    current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
    315                    current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
    316                    current_state_menu2.edition = ED_CAN_BE_EDITED;
    317                    new_level_menu();
    318                        
    319                    //Виставляємо біт обновлення екрану
    320                    new_state_keyboard |= (1<<BIT_REWRITE);
    321          
    322                    //Очистити сигналізацію, що натиснута кнопка 
    323                    new_state_keyboard &= (unsigned int)(~action);
    324                  }
    325                  else
    326                  {
    327                    if ((action = (new_state_keyboard & (1<<BIT_REWRITE ))) !=0)
    328                    {
    329                      current_state_menu2.position_cursor_x = COL_NEW_PASSWORD_BEGIN;
    330                      position_in_current_level_menu2[current_state_menu2.current_level] = 1;
    331                      //Скидаємо новий пароль у нуль і скидаємо кількість введених символів
    332          
    333                      number_symbols = 0;
    334                      unsigned int temp_value = *p_password_edit;
    335                      while (temp_value != 0)
    336                      {
    337                        number_symbols++;
    338                        temp_value /= 10;
    339                      }
    340                      if (number_symbols == 0) number_symbols = 1; //Це випадок коли password = 0, тоді кількість символів рівна 0, бо число є "0"
    341                    }
    342                    else if ((action = (new_state_keyboard & (1<<BIT_KEY_UP))) !=0)
    343                    {
    344                      unsigned int vaga = 1, temp_value, ostacha, vyshchi_rozrjady;
    345                      int edit_rozrjad;
    346                        
    347                      for (intptr_t i = (current_state_menu2.position_cursor_x - COL_NEW_PASSWORD_BEGIN + 1); i < number_symbols; i++) vaga *= 10;
    348                      ostacha = *p_password_edit % vaga;
    349                      temp_value = (*p_password_edit / vaga);
    350                      edit_rozrjad = temp_value % 10;
    351                      vyshchi_rozrjady = temp_value / 10;
    352                    
    353                      if (++edit_rozrjad > MAX_VALUE_DIGIT_PASSWORD) 
    354                      {
    355                        if (ostacha == 0)
    356                        {
    357                          edit_rozrjad = 0;
    358                          if (number_symbols > 1)
    359                          {
    360                            number_symbols--;
    361                            current_state_menu2.position_cursor_x--;
    362                            *p_password_edit = vyshchi_rozrjady*vaga;
    363                          }
    364                          else
    365                          {
    366                            if (
    367                                (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_1) && 
    368                                (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_2)
    369                               )
    370                            {
    371                              edit_rozrjad = 1;
    372                            }
    373                            *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga; 
    374                          }
    375                        }
    376                        else
    377                        {
    378                          edit_rozrjad = 1;
    379                          *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga + ostacha;
    380                        }
    381                      }
    382                      else
    383                      {
    384                        *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga + ostacha;
    385                      }
    386                    }
    387                    else if ((action = (new_state_keyboard & (1<<BIT_KEY_DOWN))) !=0)
    388                    {
    389                      unsigned int vaga = 1, temp_value, ostacha, vyshchi_rozrjady;
    390                      int edit_rozrjad;
    391                        
    392                      for (intptr_t i = (current_state_menu2.position_cursor_x - COL_NEW_PASSWORD_BEGIN + 1); i < number_symbols; i++) vaga *= 10;
    393                      ostacha = *p_password_edit % vaga;
    394                      temp_value = (*p_password_edit / vaga);
    395                      edit_rozrjad = temp_value % 10;
    396                      vyshchi_rozrjady = temp_value / 10;
    397                    
    398                      if (--edit_rozrjad < 0) 
    399                      {
    400                        edit_rozrjad = MAX_VALUE_DIGIT_PASSWORD;
    401                        *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga + ostacha;
    402                      }
    403                      else if (edit_rozrjad == 0)
    404                      {
    405                        if ((vyshchi_rozrjady != 0) || (ostacha != 0))
    406                        {
    407                          if (ostacha == 0)
    408                          {
    409                            edit_rozrjad = 0;
    410                            if (number_symbols > 1)
    411                            {
    412                              number_symbols--;
    413                              current_state_menu2.position_cursor_x--;
    414                              *p_password_edit = vyshchi_rozrjady*vaga;
    415                            }
    416                            else
    417                            {
    418                              if (
    419                                  (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_1) && 
    420                                  (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_2)
    421                                 )
    422                              {
    423                                edit_rozrjad = MAX_VALUE_DIGIT_PASSWORD;
    424                              }
    425                              *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga;
    426                            }
    427                          }
    428                          else
    429                          {
    430                            edit_rozrjad = MAX_VALUE_DIGIT_PASSWORD;
    431                            *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga + ostacha;
    432                          }
    433                        }
    434                        else
    435                        {
    436                          if (
    437                              (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_1) && 
    438                              (current_state_menu2.number_selection != INDEX_LIST_PASSWORDS_M2_2)
    439                             )
    440                          {
    441                            *p_password_edit = MAX_VALUE_DIGIT_PASSWORD;
    442                          }
    443                          else *p_password_edit = 0;
    444                        }
    445                            
    446                      }
    447                      else
    448                      {
    449                        *p_password_edit = (vyshchi_rozrjady*10 + edit_rozrjad)*vaga + ostacha;
    450                      }
    451                    }
    452                    else if ((action = (new_state_keyboard & (1<<BIT_KEY_RIGHT))) !=0)
    453                    {
    454                      //Натиснута кнопка RIGHT
    455                      if (*p_password_edit != 0)
    456                      {
    457                        if (++current_state_menu2.position_cursor_x > COL_NEW_PASSWORD_END) current_state_menu2.position_cursor_x = COL_NEW_PASSWORD_BEGIN;
    458                        if (number_symbols < (current_state_menu2.position_cursor_x - COL_NEW_PASSWORD_BEGIN + 1))
    459                        {
    460                          *p_password_edit = (*p_password_edit)*10 + 1;
    461                          number_symbols++;
    462                        }
    463                      }
    464                    }
    465                    else if ((action = (new_state_keyboard & (1<<BIT_KEY_LEFT))) !=0)
    466                    {
    467                      //Натиснута кнопка RIGHT
    468                      if (*p_password_edit != 0)
    469                      {
    470                        if (--current_state_menu2.position_cursor_x < COL_NEW_PASSWORD_BEGIN) current_state_menu2.position_cursor_x = COL_NEW_PASSWORD_BEGIN + number_symbols - 1;
    471                      }
    472                    }
    473                  
    474                    //Формуємо екран відображення
    475                    p_menu_param_1 = p_password_edit;
    476                    unsigned int view = true;
    477                    p_menu_param_2 = &view;
    478                    if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    479                    else
    480                    {
    481                      //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    482                      total_error_sw_fixed(109);
    483                    }
    484                    //Очищаємо біт обновлення екрану
    485                    new_state_keyboard &= (unsigned int)(~action);
    486                  }
    487                  
    488                  break;
    489                }
    490              case MAIN_MANU2_LEVEL:
    491              case MEASUREMENT_MENU2_LEVEL:
    492              case INPUTS_OUTPUTS_MENU2_LEVEL:
    493              case INPUTS_MENU2_LEVEL:
    494              case OUTPUTS_MENU2_LEVEL:
    495              case REGISTRATORS_MENU2_LEVEL:
    496              case LIST_SETTINGS_MENU2_LEVEL:
    497              case LIST_SETTINGS_BIOS_MENU2_LEVEL:
    498              case LIST_INPUTS_MENU2_LEVEL:
    499              case LIST_SETTINGS_INPUT_MENU2_LEVEL:
    500              case LIST_OUTPUTS_MENU2_LEVEL:
    501              case LIST_SETTINGS_OUTPUT_MENU2_LEVEL:
    502              case LIST_LEDS_MENU2_LEVEL:
    503              case LIST_SETTINGS_LED_MENU2_LEVEL:
    504              case LIST_ALARMS_MENU2_LEVEL:
    505              case LIST_SETTINGS_ALARM_MENU2_LEVEL:
    506              case LIST_GROUP_ALARMS_MENU2_LEVEL:
    507              case LIST_SETTINGS_GROUP_ALARM_MENU2_LEVEL:
    508              case LIST_TIMERS_MENU2_LEVEL:
    509              case LIST_SETTINGS_TIMER_MENU2_LEVEL:
    510              case LIST_MEANDERS_MENU2_LEVEL:
    511              case LIST_SETTINGS_MEANDER_MENU2_LEVEL:
    512              case PARAM_LIST_LOGICAL_NODES_MENU2_LEVEL:
    513              case PARAM_LIST_SELECTED_LOGICAL_NODES_MENU2_LEVEL:
    514              case LIST_SETTINGS_COMMUNIACATION_PARAMETERS_MENU2_LEVEL:
    515              case NAME_OF_CELL_MENU2_LEVEL:
    516              case SETTINGS_RS485_MENU2_LEVEL:
    517              case LIST_PASSWORDS_MENU2_LEVEL:
    518              case DIAGNOSTICS_MENU2_LEVEL:
    519              case LABELS_MENU2_LEVEL:
    520              case CONFIG_LABEL_MENU2_LEVEL:
    521              case SETTINGS_LABEL_MENU2_LEVEL:
    522              case INFO_MENU2_LEVEL:
    523              case DATE_TIME_INFO_MENU2_LEVEL:
    524                {
    525                  //Формуємо маску кнопок, які можуть бути натиснутими
    526                  unsigned int maska_keyboard_bits = (1<<BIT_REWRITE) | (1<<BIT_KEY_ENTER);
    527                  
    528                  if (current_state_menu2.edition == ED_CONFIRM_CHANGES) 
    529                    maska_keyboard_bits |= (1<<BIT_KEY_ESC);
    530                  else if (current_state_menu2.edition <= ED_EDITION) 
    531                    maska_keyboard_bits |= (1<<BIT_KEY_ESC) | (1<<BIT_KEY_UP)|(1<<BIT_KEY_DOWN);
    532          
    533                  //Очищаємо всі біти краім упралінський
    534                  new_state_keyboard &= maska_keyboard_bits;
    535          
    536                  if (new_state_keyboard !=0)
    537                  {
    538                    //Пріоритет стоїть на обновлені екрану
    539                    if (
    540                        ( (action = (new_state_keyboard & (1<<BIT_REWRITE ))) !=0) ||
    541                        ( (action = (new_state_keyboard & (1<<BIT_KEY_UP  ))) !=0) ||
    542                        ( (action = (new_state_keyboard & (1<<BIT_KEY_DOWN))) !=0)
    543                       )   
    544                    {
    545                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_move(action, max_row);
    546                      else
    547                      {
    548                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    549                        total_error_sw_fixed(84);
    550                      }
    551                      position_in_current_level_menu2[current_state_menu2.current_level] = current_state_menu2.index_position;
    552                      //Формуємо екран відображення
    553                      unsigned int menu_param_1;
    554                      if (
    555                          (current_state_menu2.current_level == CONFIG_LABEL_MENU2_LEVEL) ||
    556                          (current_state_menu2.current_level == SETTINGS_LABEL_MENU2_LEVEL)
    557                         )
    558                      {
    559                        if (current_state_menu2.current_level == CONFIG_LABEL_MENU2_LEVEL) menu_param_1 = 0;
    560                        else menu_param_1 = 1;
    561                        p_menu_param_1 = &menu_param_1; 
    562                      }
    563                      
    564                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    565                      else
    566                      {
    567                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    568                        total_error_sw_fixed(65);
    569                      }
    570                      //Очищаємо біт обновлення екрану
    571                      new_state_keyboard &= (unsigned int)(~action);
    572                    }
    573                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ENTER))) !=0)
    574                    {
    575                      //Натиснута кнопка ENTER
    576                      if (current_state_menu2.edition == ED_CONFIRM_CHANGES)
    577                      {
    578                        /*
    579                        Натискування ENTER у режимі підтвердження дії має виконати цю дію.
    580                        У залежності від результату виконання цієї дії треба або вивести повідомлення
    581                        про попредження, помилку або перейти у режим споглядання (з переходом) у те меню
    582                        в яке спрямовувавося воно перед активацєю дій, які зараз будуть виконуватися
    583                        */
    584                        //Треба ввести у дію внесені зміни
    585                        if (current_state_menu2.current_level == LIST_SETTINGS_MENU2_LEVEL)
    586                        {
    587                          //Треба активувати нові налаштуваня
    588                          unsigned int result = set_config_and_settings(1, MENU_PARAMS_FIX_CHANGES);
    589                          if (result == 0)
    590                          {
    591                            //Знімаємо режим редагування
    592                            current_state_menu2.edition = ED_VIEWING;
    593                          }
    594                          else if (result == 1)
    595                          {
    596                            //Повідомляємо про неможливість встановити нову конфігурацію
    597                            current_state_menu2.edition = ED_INFO;
    598                          }
    599                          else
    600                          {
    601                            //Повідомляємо про критичну помилку
    602                            current_state_menu2.edition = ED_ERROR;
    603                          }
    604                            
    605                          config_settings_modified = 0;
    606                        }
    607                        else
    608                        {
    609                          //Знімаємро режим редагування (поки що ця ситуація не використовується. Написана на майбутнє)
    610                          current_state_menu2.edition = ED_VIEWING;
    611                        }
    612                        
    613                        if (current_state_menu2.edition == ED_VIEWING)
    614                        {
    615                          //Повторно подаємо команду на вихід
    616                          new_state_keyboard |= (1<<BIT_KEY_ESC);
    617                        }
    618                        else
    619                        {
    620                          //Повторно подаємо команду на обновлення екрану
    621                          new_state_keyboard |= (1<<BIT_REWRITE);
    622                        }
    623                      }
    624                      else if (
    625                               (current_state_menu2.edition == ED_WARNING_EDITION_BUSY) ||
    626                               (current_state_menu2.edition == ED_WARNING_ENTER_ESC) ||
    627                               (current_state_menu2.edition == ED_WARNING_ENTER)
    628                              )   
    629                      {
    630                        /*
    631                        Натискування ENTER у режимі виводу попередження має скинути режим
    632                        попередження і обновити ектан у якому це повідомлення появилося
    633                        */
    634                        
    635                        //Входимо без прав подальшого редагування
    636                        current_state_menu2.edition = ED_VIEWING;
    637                        
    638                        //Виставляємо команду на обновлекння нового екрану
    639                        new_state_keyboard |= (1<<BIT_REWRITE);
    640                      }
    641                      else if (current_state_menu2.edition == ED_INFO)
    642                      {
    643                        /*
    644                        Натискування ENTER у режимі виводу повідомлення про неуспішну дію 
    645                        має скинути режим повідомлення про неуспішну дію і перейти у екран,
    646                        куди споживач спраямовував меню і які викликати попередні якісь дії
    647                        (зокрема, запис конфігурації+налаштувань при виході з Налаштувань)
    648                        */
    649                        
    650                        //Виходимо з цього пункту меню
    651                        current_state_menu2.edition = ED_VIEWING;
    652          
    653                        //Повторно подаємо команду на вихід
    654                        new_state_keyboard |= (1<<BIT_KEY_ESC);
    655                      }
    656                      else
    657                      {
    658                        const enum _menu2_levels next_for_main_menu2[MAX_ROW_MAIN_M2] = {TIME_MANU2_LEVEL, MEASUREMENT_MENU2_LEVEL, INPUTS_OUTPUTS_MENU2_LEVEL, REGISTRATORS_MENU2_LEVEL, LIST_SETTINGS_MENU2_LEVEL, DIAGNOSTICS_MENU2_LEVEL, LABELS_MENU2_LEVEL, INFO_MENU2_LEVEL};
    659                        const enum _menu2_levels next_for_input_output_menu2[MAX_ROW_INPUT_OUTPUT_M2] = {INPUTS_MENU2_LEVEL, OUTPUTS_MENU2_LEVEL};
    660                        const enum _menu2_levels next_for_labels_menu2[MAX_ROW_LABELS_M2] = {CONFIG_LABEL_MENU2_LEVEL, SETTINGS_LABEL_MENU2_LEVEL};
    661                        const enum _menu2_levels next_for_info_menu2[MAX_ROW_INFO_M2] = {DATE_TIME_INFO_MENU2_LEVEL, INFO_MENU2_LEVEL};
    662                        const enum _menu2_levels next_for_list_settings_menu2[MAX_ROW_LIST_SETTINGS_M2] = {CONFIGURATION_MENU2_LEVEL, LIST_SETTINGS_BIOS_MENU2_LEVEL, LIST_ALARMS_MENU2_LEVEL, LIST_GROUP_ALARMS_MENU2_LEVEL, LIST_TIMERS_MENU2_LEVEL, LIST_MEANDERS_MENU2_LEVEL, PARAM_LIST_LOGICAL_NODES_MENU2_LEVEL, LANGUAGE_MENU2_LEVEL, LIST_SETTINGS_COMMUNIACATION_PARAMETERS_MENU2_LEVEL, LIST_PASSWORDS_MENU2_LEVEL};
    663                        const enum _menu2_levels next_for_list_settings_bios_menu2[MAX_ROW_LIST_SETTINGS_BIOS_M2] = {LIST_INPUTS_MENU2_LEVEL, LIST_OUTPUTS_MENU2_LEVEL, LIST_LEDS_MENU2_LEVEL};
    664                        const enum _menu2_levels next_for_list_inputs_menu2 = LIST_SETTINGS_INPUT_MENU2_LEVEL;
    665                        const enum _menu2_levels next_for_list_settings_input_menu2[MAX_ROW_LIST_SETTINGS_DC_M2] = {DELAY_INPUT_MENU2_LEVEL, CTRL_INPUT_MENU2_LEVEL};
    666                        const enum _menu2_levels next_for_list_outputs_menu2 = LIST_SETTINGS_OUTPUT_MENU2_LEVEL;
    667                        const enum _menu2_levels next_for_list_settings_output_menu2[MAX_ROW_LIST_SETTINGS_C_M2] = {CTRL_OUTPUT_MENU2_LEVEL};
    668                        const enum _menu2_levels next_for_list_leds_menu2 = LIST_SETTINGS_LED_MENU2_LEVEL;
    669                        const enum _menu2_levels next_for_list_settings_led_menu2[MAX_ROW_LIST_SETTINGS_C_M2] = {CTRL_LED_MENU2_LEVEL};
    670                        const enum _menu2_levels next_for_list_alarms_menu2 = LIST_SETTINGS_ALARM_MENU2_LEVEL;
    671                        const enum _menu2_levels next_for_list_settings_alarm_menu2[MAX_ROW_LIST_SETTINGS_DC_M2] = {DELAY_ALARM_MENU2_LEVEL, CTRL_ALARM_MENU2_LEVEL};
    672                        const enum _menu2_levels next_for_list_group_alarms_menu2 = LIST_SETTINGS_GROUP_ALARM_MENU2_LEVEL;
    673                        const enum _menu2_levels next_for_list_settings_group_alarm_menu2[MAX_ROW_LIST_SETTINGS_PDC_M2] = {PICKUP_GROUP_ALARM_MENU2_LEVEL, DELAY_GROUP_ALARM_MENU2_LEVEL, CTRL_GROUP_ALARM_MENU2_LEVEL};
    674                        const enum _menu2_levels next_for_list_timers_menu2 = LIST_SETTINGS_TIMER_MENU2_LEVEL;
    675                        const enum _menu2_levels next_for_list_settings_timer_menu2[MAX_ROW_LIST_SETTINGS_D_M2] = {DELAY_TIMER_MENU2_LEVEL};
    676                        const enum _menu2_levels next_for_list_meanders_menu2 = LIST_SETTINGS_MEANDER_MENU2_LEVEL;
    677                        const enum _menu2_levels next_for_list_settings_meander_menu2[MAX_ROW_LIST_SETTINGS_D_M2] = {DELAY_MEANDER_MENU2_LEVEL};
    678                        const enum _menu2_levels next_for_list_settings_communication_parameters_menu2[MAX_ROW_CHCP_M2] = {NAME_OF_CELL_MENU2_LEVEL, ADDRESS_MENU2_LEVEL, SETTINGS_RS485_MENU2_LEVEL};
    679                        const enum _menu2_levels next_for_list_settings_RS485_menu2[MAX_ROW_SETTING_RS485_M2] = {BAUD_RS485_MENU2_LEVEL, PARE_RS485_MENU2_LEVEL, STOP_BITS_RS485_MENU2_LEVEL, TIMEOUT_RS485_MENU2_LEVEL};
    680                        const enum _menu2_levels next_for_list_passwords_menu2[MAX_ROW_LIST_PASSWORDS_M2] = {SET_NEW_PASSWORD_MENU2_LEVEL, SET_NEW_PASSWORD_MENU2_LEVEL};
    681                        const enum _menu2_levels next_for_param_list_logical_nodes[MAX_ROW_PARAM_LIST_LOGICAL_NODES_M2] = {PARAM_LIST_LOGICAL_NODES_MENU2_LEVEL, PARAM_LIST_SELECTED_LOGICAL_NODES_MENU2_LEVEL};
    682          
    683                        const enum _menu2_levels *p = NULL;
    684                        
    685                        switch (current_state_menu2.current_level)
    686                        {
    687                        case MAIN_MANU2_LEVEL:
    688                          {
    689                            p = &next_for_main_menu2[current_state_menu2.index_position];
    690                            break;
    691                          }
    692                        case MEASUREMENT_MENU2_LEVEL:
    693                          {
    694                            break;
    695                          }
    696                        case INPUTS_OUTPUTS_MENU2_LEVEL:
    697                          {
    698                            p = &next_for_input_output_menu2[current_state_menu2.index_position];
    699                            break;
    700                          }
    701                        case LIST_SETTINGS_MENU2_LEVEL:
    702                          {
    703                            p = &next_for_list_settings_menu2[current_state_menu2.index_position];
    704                            break;
    705                          }
    706                        case LIST_SETTINGS_BIOS_MENU2_LEVEL:
    707                          {
    708                            p = &next_for_list_settings_bios_menu2[current_state_menu2.index_position];
    709                            break;
    710                          }
    711                        case LIST_INPUTS_MENU2_LEVEL:
    712                          {
    713                            p = &next_for_list_inputs_menu2;
    714                            current_state_menu2.number_selection = current_state_menu2.index_position;
    715                            
    716                            position_in_current_level_menu2[DELAY_INPUT_MENU2_LEVEL]         = 
    717                            position_in_current_level_menu2[CTRL_INPUT_MENU2_LEVEL]          = 0;
    718                            
    719                            break;
    720                          }
    721                        case LIST_SETTINGS_INPUT_MENU2_LEVEL:
    722                          {
    723                            p = &next_for_list_settings_input_menu2[current_state_menu2.index_position];
    724                            break;
    725                          }
    726                        case LIST_OUTPUTS_MENU2_LEVEL:
    727                          {
    728                            p = &next_for_list_outputs_menu2;
    729                            current_state_menu2.number_selection = current_state_menu2.index_position;
    730                            
    731                            position_in_current_level_menu2[CTRL_OUTPUT_MENU2_LEVEL]          = 0;
    732                            
    733                            break;
    734                          }
    735                        case LIST_SETTINGS_OUTPUT_MENU2_LEVEL:
    736                          {
    737                            p = &next_for_list_settings_output_menu2[current_state_menu2.index_position];
    738                            break;
    739                          }
    740                        case LIST_LEDS_MENU2_LEVEL:
    741                          {
    742                            p = &next_for_list_leds_menu2;
    743                            current_state_menu2.number_selection = current_state_menu2.index_position;
    744                            
    745                            position_in_current_level_menu2[CTRL_LED_MENU2_LEVEL]          = 0;
    746                            
    747                            break;
    748                          }
    749                        case LIST_SETTINGS_LED_MENU2_LEVEL:
    750                          {
    751                            p = &next_for_list_settings_led_menu2[current_state_menu2.index_position];
    752                            break;
    753                          }
    754                        case LIST_ALARMS_MENU2_LEVEL:
    755                          {
    756                            p = &next_for_list_alarms_menu2;
    757                            current_state_menu2.number_selection = current_state_menu2.index_position;
    758                            
    759                            position_in_current_level_menu2[DELAY_ALARM_MENU2_LEVEL]         = 
    760                            position_in_current_level_menu2[CTRL_ALARM_MENU2_LEVEL]          = 0;
    761                            
    762                            break;
    763                          }
    764                        case LIST_SETTINGS_ALARM_MENU2_LEVEL:
    765                          {
    766                            p = &next_for_list_settings_alarm_menu2[current_state_menu2.index_position];
    767                            break;
    768                          }
    769                        case LIST_GROUP_ALARMS_MENU2_LEVEL:
    770                          {
    771                            p = &next_for_list_group_alarms_menu2;
    772                            current_state_menu2.number_selection = current_state_menu2.index_position;
    773                            
    774                            position_in_current_level_menu2[PICKUP_GROUP_ALARM_MENU2_LEVEL]        = 
    775                            position_in_current_level_menu2[DELAY_GROUP_ALARM_MENU2_LEVEL]         = 
    776                            position_in_current_level_menu2[CTRL_GROUP_ALARM_MENU2_LEVEL]          = 0;
    777                            
    778                            break;
    779                          }
    780                        case LIST_SETTINGS_GROUP_ALARM_MENU2_LEVEL:
    781                          {
    782                            p = &next_for_list_settings_group_alarm_menu2[current_state_menu2.index_position];
    783                            break;
    784                          }
    785                        case LIST_TIMERS_MENU2_LEVEL:
    786                          {
    787                            p = &next_for_list_timers_menu2;
    788                            current_state_menu2.number_selection = current_state_menu2.index_position;
    789                            
    790                            position_in_current_level_menu2[DELAY_TIMER_MENU2_LEVEL]         = 0;
    791                            
    792                            break;
    793                          }
    794                        case LIST_SETTINGS_TIMER_MENU2_LEVEL:
    795                          {
    796                            p = &next_for_list_settings_timer_menu2[current_state_menu2.index_position];
    797                            break;
    798                          }
    799                        case LIST_MEANDERS_MENU2_LEVEL:
    800                          {
    801                            p = &next_for_list_meanders_menu2;
    802                            current_state_menu2.number_selection = current_state_menu2.index_position;
    803                            
    804                            position_in_current_level_menu2[DELAY_MEANDER_MENU2_LEVEL]         = 0;
    805                            
    806                            break;
    807                          }
    808                        case LIST_SETTINGS_MEANDER_MENU2_LEVEL:
    809                          {
    810                            p = &next_for_list_settings_meander_menu2[current_state_menu2.index_position];
    811                            break;
    812                          }
    813                        case PARAM_LIST_LOGICAL_NODES_MENU2_LEVEL:
    814                          {
    815                            p = &next_for_param_list_logical_nodes[(current_state_menu2.index_position != INDEX_PARAM_LIST_LOGICAL_NODES_M2_GENERAL_BLOCK)];
    816                            break;
    817                          }
    818                        case LIST_SETTINGS_COMMUNIACATION_PARAMETERS_MENU2_LEVEL:
    819                          {
    820                            p = &next_for_list_settings_communication_parameters_menu2[current_state_menu2.index_position];
    821                            break;
    822                          }
    823                        case SETTINGS_RS485_MENU2_LEVEL:
    824                          {
    825                            p = &next_for_list_settings_RS485_menu2[current_state_menu2.index_position];
    826                            break;
    827                          }
    828                        case LIST_PASSWORDS_MENU2_LEVEL:
    829                          {
    830                            current_state_menu2.number_selection = current_state_menu2.index_position;
    831          
    832                            p = &next_for_list_passwords_menu2[current_state_menu2.index_position];
    833                            break;
    834                          }
    835                        case LABELS_MENU2_LEVEL:
    836                          {
    837                            p = &next_for_labels_menu2[current_state_menu2.index_position];
    838                            break;
    839                          }
    840                        case INFO_MENU2_LEVEL:
    841                          {
    842                            p = &next_for_info_menu2[current_state_menu2.index_position];
    843                            break;
    844                          }
    845                        }
    846                        
    847                        if (p != NULL)
    848                        {
    849                          enum _menu2_levels temp_current_level = *p;
    850                          if (current_state_menu2.func_press_enter != NULL) 
    851                          {
    852                            p_menu_param_1 = &temp_current_level;
    853                            current_state_menu2.func_press_enter();
    854                          }
    855                          if (current_state_menu2.current_level != temp_current_level) 
    856                          {
    857                          
    858                            previous_level_in_current_level_menu2[temp_current_level] = current_state_menu2.current_level;
    859                          
    860                            current_state_menu2.current_level = temp_current_level;
    861                            current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
    862                            new_level_menu();
    863          
    864                            //Виставляємо команду на обновлекння нового екрану
    865                            new_state_keyboard |= (1<<BIT_REWRITE);
    866                          }
    867                        }
    868                      }
    869                        
    870                      //Очистити сигналізацію, що натиснута кнопка 
    871                      new_state_keyboard &= (unsigned int)(~action);
    872                    }
    873                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ESC))) !=0)
    874                    {
    875                      //Натиснута кнопка ESC
    876          
    877                      if (current_state_menu2.current_level != MAIN_MANU2_LEVEL)
    878                      {
    879                        if (current_state_menu2.func_press_esc != NULL) current_state_menu2.func_press_esc();
    880                        
    881                        if (current_state_menu2.edition <= ED_CAN_BE_EDITED)
    882                        {
    883                          //Переходимо у попереднє меню
    884                          current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
    885                          current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
    886                          new_level_menu();
    887                        }
    888          
    889                        //Виставляємо команду на обновлекння нового екрану
    890                        new_state_keyboard |= (1<<BIT_REWRITE);
    891                      }
    892          
    893                      //Очистити сигналізацію, що натиснута кнопка 
    894                      new_state_keyboard &= (unsigned int)(~action);
    895                    }
    896                    else
    897                    {
    898                      //Натиснуто зразу декілька кнопок - це є невизначена ситуація, тому скидаємо сигналізацію про натиснуті кнопки і чекаємо знову
    899                      unsigned int temp_data = new_state_keyboard;
    900                      new_state_keyboard &= ~temp_data;
    901                    }
    902                  }
    903                    
    904                  break;
    905                }
    906              case TIME_MANU2_LEVEL:
    907                {
    908                  //Формуємо маску кнопок. які можуть бути натиснутими
    909                  unsigned int maska_keyboard_bits = (1<<BIT_KEY_ENTER)| (1<<BIT_KEY_ESC) | (1<<BIT_REWRITE);
    910                  
    911                  if (current_state_menu2.edition <= ED_EDITION)
    912                  {
    913                    maska_keyboard_bits |= (1<<BIT_KEY_UP)|(1<<BIT_KEY_DOWN);
    914                    
    915                    if (current_state_menu2.edition == ED_EDITION)
    916                      maska_keyboard_bits |= (1<<BIT_KEY_RIGHT) | (1<<BIT_KEY_LEFT);
    917                  }
    918                  
    919                  //Очищаємо всі біти краім упралінський
    920                  new_state_keyboard &= maska_keyboard_bits;
    921                  //Дальше виконуємо дії, якщо натиснута кнопка на яку треба реагівати, або стоїть команда обновити екран
    922                  if (new_state_keyboard !=0)
    923                  {
    924                    //Пріоритет стоїть на обновлені екрану
    925                    if( (action = (new_state_keyboard & (1<<BIT_REWRITE))) != 0)
    926                    {
    927                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_move(action, max_row);
    928                      else
    929                      {
    930                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    931                        total_error_sw_fixed(87);
    932                      }
    933                      position_in_current_level_menu2[current_state_menu2.current_level] = current_state_menu2.index_position;
    934          
    935                      //Формуємо екран відображення
    936                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    937                      else
    938                      {
    939                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    940                        total_error_sw_fixed(68);
    941                      }
    942                      //Очищаємо біт обновлення екрану
    943                      new_state_keyboard &= (unsigned int)(~action);
    944                    }
    945                    else if (
    946                             ((action = (new_state_keyboard & (1<<BIT_KEY_UP  ))) !=0) ||
    947                             ((action = (new_state_keyboard & (1<<BIT_KEY_DOWN))) !=0)
    948                            )
    949                    {
    950                      //Натиснута кнопка UP
    951                      if(current_state_menu2.edition <= ED_CAN_BE_EDITED)
    952                      {
    953                        //Переміщення у режимі спостерігання
    954                        if (current_state_menu2.func_show != NULL) current_state_menu2.func_move(action, max_row);
    955                        else
    956                        {
    957                          //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    958                          total_error_sw_fixed(88);
    959                        }
    960                        position_in_current_level_menu2[current_state_menu2.current_level] = current_state_menu2.index_position;
    961                      }
    962                      else
    963                      {
    964                        //Редагування числа
    965                        if (current_state_menu2.func_change != NULL) current_state_menu2.func_change(action); 
    966                        else
    967                        {
    968                          //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    969                          total_error_sw_fixed(77);
    970                        }
    971                      }
    972          
    973                      //Формуємо екран
    974                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    975                      else
    976                      {
    977                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    978                        total_error_sw_fixed(69);
    979                      }
    980                      //Очистити сигналізацію, що натиснута кнопка 
    981                      new_state_keyboard &= (unsigned int)(~action);
    982                    }
    983                    else if (
    984                             ((action = (new_state_keyboard & (1<<BIT_KEY_RIGHT))) !=0) ||
    985                             ((action = (new_state_keyboard & (1<<BIT_KEY_LEFT ))) !=0)
    986                            )
    987                    {
    988                      if (current_state_menu2.func_change != NULL) current_state_menu2.func_change(action); 
    989                      else
    990                      {
    991                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
    992                        total_error_sw_fixed(81);
    993                      }
    994                          
    995                      //Формуємо екран
    996                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
    997                      else
    998                      {
    999                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1000                        total_error_sw_fixed(73);
   1001                      }
   1002                      //Очистити сигналізацію, що натиснута кнопка 
   1003                      new_state_keyboard &= (unsigned int)(~action);
   1004                    }
   1005                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ENTER))) != 0)
   1006                    {
   1007                      //Натиснута кнопка ENTER
   1008                      enum _result_pressed_enter_during_edition result;
   1009                      if (current_state_menu2.func_press_enter != NULL) result = current_state_menu2.func_press_enter();
   1010          
   1011                      if (current_state_menu2.edition <= ED_CAN_BE_EDITED)
   1012                      {
   1013          //              prev_edit = current_state_menu2.edition;
   1014                         
   1015                        if ((current_state_menu2.edition == ED_VIEWING) && (settings_fix_prt.password_2 != 0))
   1016                        {
   1017                          //Переходимо на меню запиту паролю
   1018                          next_level_in_current_level_menu2[PASSWORD_MENU2_LEVEL] = previous_level_in_current_level_menu2[PASSWORD_MENU2_LEVEL] = current_state_menu2.current_level;
   1019                          current_state_menu2.current_level = PASSWORD_MENU2_LEVEL;
   1020                          current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
   1021                          new_level_menu();
   1022                        }
   1023                        else
   1024                        {
   1025                          //Переходимо у режим редагування
   1026                          current_state_menu2.edition = ED_EDITION;
   1027                        }
   1028                      }
   1029                      else if (current_state_menu2.edition == ED_EDITION)
   1030                      {
   1031                        //Проводимо аналіз над редагованими даними
   1032                        switch (result)
   1033                        {
   1034                        case RPEDE_DATA_NOT_CHANGED:
   1035                          {
   1036                            //Дані не зазнали змін
   1037                            current_state_menu2.edition = /*prev_edit*/ED_VIEWING;
   1038                            break;
   1039                          }
   1040                        case RPEDE_DATA_CHANGED_OK:
   1041                          {
   1042                            //Дані зазнали змін і є у діапазоні
   1043                            current_state_menu2.edition = ED_CONFIRM_CHANGES;
   1044                            break;
   1045                          }
   1046                        case RPEDE_DATA_CHANGED_OUT_OF_RANGE:
   1047                          {
   1048                            //Дані зазнали змін але не є у діапазоні
   1049                            current_state_menu2.edition = ED_WARNING_ENTER_ESC;
   1050                            break;
   1051                          }
   1052                        }
   1053                      }
   1054                      else if (current_state_menu2.edition == ED_CONFIRM_CHANGES)
   1055                      {
   1056                        current_state_menu2.edition = /*prev_edit*/ED_VIEWING;
   1057                      }
   1058                      else if (current_state_menu2.edition == ED_WARNING_ENTER_ESC)
   1059                      {
   1060                        current_state_menu2.edition = ED_EDITION;
   1061                      }
   1062          
   1063                      //Виставляємо біт обновлення екрану
   1064                      new_state_keyboard |= (1<<BIT_REWRITE);
   1065                        
   1066                      //Очистити сигналізацію, що натиснута кнопка 
   1067                      new_state_keyboard &= (unsigned int)(~action);
   1068                    }
   1069                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ESC))) !=0)
   1070                    {
   1071                      //Натиснута кнопка ESC
   1072                      if (current_state_menu2.func_press_esc != NULL) current_state_menu2.func_press_esc();
   1073          
   1074                      if(current_state_menu2.edition <= ED_CAN_BE_EDITED)
   1075                      {
   1076                        //Вихід у режимі спостерігання
   1077                        //Переходимо у попереднє меню
   1078                        current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
   1079                        current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
   1080                        new_level_menu();
   1081                      }
   1082                      else
   1083                      {
   1084                        //Вихід у режимі редагування без введення змін
   1085                        current_state_menu2.edition = /*prev_edit*/ED_VIEWING;
   1086                      }
   1087          
   1088                      //Виставляємо команду на обновлекння нового екрану
   1089                      new_state_keyboard |= (1<<BIT_REWRITE);
   1090          
   1091                      //Очистити сигналізацію, що натиснута кнопка 
   1092                      new_state_keyboard &= (unsigned int)(~action);
   1093                    }
   1094                    else
   1095                    {
   1096                      //Натиснуто зразу декілька кнопок - це є невизначена ситуація, тому скидаємо сигналізацію про натиснуті кнопки і чекаємо знову
   1097                      unsigned int temp_data = new_state_keyboard;
   1098                      new_state_keyboard &= ~temp_data;
   1099                    }
   1100                  }
   1101                  break;
   1102                }
   1103              case CONFIGURATION_MENU2_LEVEL:
   1104              case DELAY_ALARM_MENU2_LEVEL:
   1105              case CTRL_ALARM_MENU2_LEVEL:
   1106              case PICKUP_GROUP_ALARM_MENU2_LEVEL:
   1107              case DELAY_GROUP_ALARM_MENU2_LEVEL:
   1108              case CTRL_GROUP_ALARM_MENU2_LEVEL:
   1109              case DELAY_TIMER_MENU2_LEVEL:
   1110              case DELAY_MEANDER_MENU2_LEVEL:
   1111              case DELAY_INPUT_MENU2_LEVEL:
   1112              case CTRL_INPUT_MENU2_LEVEL:
   1113              case CTRL_OUTPUT_MENU2_LEVEL:
   1114              case CTRL_LED_MENU2_LEVEL:
   1115              case LANGUAGE_MENU2_LEVEL:
   1116              case ADDRESS_MENU2_LEVEL:
   1117              case BAUD_RS485_MENU2_LEVEL:
   1118              case PARE_RS485_MENU2_LEVEL:
   1119              case STOP_BITS_RS485_MENU2_LEVEL:
   1120              case TIMEOUT_RS485_MENU2_LEVEL:
   1121                {
   1122                  //Формуємо маску кнопок, які можуть бути натиснутими
   1123                  unsigned int maska_keyboard_bits = (1<<BIT_REWRITE) | (1<<BIT_KEY_ENTER);
   1124                  
   1125                  if (
   1126                      (current_state_menu2.edition == ED_CONFIRM_CHANGES) ||
   1127                      (current_state_menu2.edition == ED_WARNING_ENTER_ESC) 
   1128                     )  
   1129                  {
   1130                    maska_keyboard_bits |= (1<<BIT_KEY_ESC);
   1131                  }
   1132                  else if (current_state_menu2.edition <= ED_EDITION) 
   1133                  {
   1134                    maska_keyboard_bits |= (1<<BIT_KEY_ESC) | (1<<BIT_KEY_UP)|(1<<BIT_KEY_DOWN);
   1135          
   1136                    if (current_state_menu2.edition == ED_EDITION)
   1137                      maska_keyboard_bits |= (1<<BIT_KEY_RIGHT) | (1<<BIT_KEY_LEFT);
   1138                  }
   1139          
   1140                  //Очищаємо всі біти краім упралінський
   1141                  new_state_keyboard &= maska_keyboard_bits;
   1142          
   1143                  if (new_state_keyboard !=0)
   1144                  {
   1145                    //Пріоритет стоїть на обновлені екрану
   1146                    if( (action = (new_state_keyboard & (1<<BIT_REWRITE))) != 0)   
   1147                    {
   1148                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_move(action, max_row);
   1149                      else
   1150                      {
   1151                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1152                        total_error_sw_fixed(67);
   1153                      }
   1154                      position_in_current_level_menu2[current_state_menu2.current_level] = current_state_menu2.index_position;
   1155          
   1156                      //Формуємо екран відображення
   1157                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
   1158                      else
   1159                      {
   1160                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1161                        total_error_sw_fixed(70);
   1162                      }
   1163                      //Очищаємо біт обновлення екрану
   1164                      new_state_keyboard &= (unsigned int)(~action);
   1165                    }
   1166                    else if (
   1167                             ((action = (new_state_keyboard & (1<<BIT_KEY_UP  ))) !=0) ||
   1168                             ((action = (new_state_keyboard & (1<<BIT_KEY_DOWN))) !=0)
   1169                            )
   1170                    {
   1171                      //Натиснута кнопка UP
   1172                      if(
   1173                         (current_state_menu2.edition <= ED_CAN_BE_EDITED) ||
   1174                         (current_state_menu2.binary_data == true)
   1175                        )   
   1176                      {
   1177                        //Переміщення у режимі спостерігання
   1178                        if (current_state_menu2.func_show != NULL) current_state_menu2.func_move(action, max_row);
   1179                        else
   1180                        {
   1181                          //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1182                          total_error_sw_fixed(74);
   1183                        }
   1184                        position_in_current_level_menu2[current_state_menu2.current_level] = current_state_menu2.index_position;
   1185                      }
   1186                      else
   1187                      {
   1188                        //Редагування числа
   1189                        if (current_state_menu2.func_change != NULL) current_state_menu2.func_change(action); 
   1190                        else
   1191                        {
   1192                          //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1193                          total_error_sw_fixed(86);
   1194                        }
   1195                      }
   1196          
   1197                      //Формуємо екран
   1198                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
   1199                      else
   1200                      {
   1201                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1202                        total_error_sw_fixed(89);
   1203                      }
   1204                      //Очистити сигналізацію, що натиснута кнопка 
   1205                      new_state_keyboard &= (unsigned int)(~action);
   1206                    }
   1207                    else if (
   1208                             ((action = (new_state_keyboard & (1<<BIT_KEY_RIGHT))) !=0) ||
   1209                             ((action = (new_state_keyboard & (1<<BIT_KEY_LEFT ))) !=0)
   1210                            )
   1211                    {
   1212                      if (current_state_menu2.func_change != NULL) current_state_menu2.func_change(action); 
   1213                      else
   1214                      {
   1215                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1216                        total_error_sw_fixed(102);
   1217                      }
   1218                          
   1219                      //Формуємо екран
   1220                      if (current_state_menu2.func_show != NULL) current_state_menu2.func_show();
   1221                      else
   1222                      {
   1223                        //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1224                        total_error_sw_fixed(103);
   1225                      }
   1226                      //Очистити сигналізацію, що натиснута кнопка 
   1227                      new_state_keyboard &= (unsigned int)(~action);
   1228                    }
   1229                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ENTER))) !=0)
   1230                    {
   1231                      //Натиснута кнопка ENTER
   1232                      enum _result_pressed_enter_during_edition result;
   1233                      if (current_state_menu2.func_press_enter != NULL) result = current_state_menu2.func_press_enter();
   1234          
   1235                      if(current_state_menu2.edition == ED_VIEWING)
   1236                      {
   1237                        if (settings_fix_prt.password_2 != 0)
   1238                        {
   1239                          //Переходимо на меню запиту паролю
   1240          //                prev_edit = current_state_menu2.edition;
   1241                          next_level_in_current_level_menu2[PASSWORD_MENU2_LEVEL] = previous_level_in_current_level_menu2[PASSWORD_MENU2_LEVEL] = current_state_menu2.current_level;
   1242                          current_state_menu2.current_level = PASSWORD_MENU2_LEVEL;
   1243                          current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
   1244                          new_level_menu();
   1245                        }
   1246                        else if (config_settings_modified == 0)
   1247                        {
   1248                          //Переходимо у режим редагування
   1249                          current_state_menu2.edition = ED_EDITION;
   1250          
   1251                          //Фіксуємо, що система меню захопила "монополію" на зміну конфігурації і налаштувань
   1252                          config_settings_modified = MASKA_MENU_LOCKS;
   1253                        }
   1254                        else
   1255                        {
   1256                          //Повідомляємо про те, що режим редагування зараз недоступний
   1257                          current_state_menu2.edition = ED_WARNING_EDITION_BUSY;
   1258                        }
   1259                      }
   1260                      else if(current_state_menu2.edition == ED_CAN_BE_EDITED)
   1261                      {
   1262                        //Переходимо у режим редагування
   1263                        current_state_menu2.edition = ED_EDITION;
   1264                      }
   1265                      else if (current_state_menu2.edition == ED_EDITION)
   1266                      {
   1267                        //Проводимо аналіз над редагованими даними
   1268                        switch (result)
   1269                        {
   1270                        case RPEDE_DATA_NOT_CHANGED:
   1271                          {
   1272                            //Дані не зазнали змін
   1273                            current_state_menu2.edition = ED_CAN_BE_EDITED;
   1274                            break;
   1275                          }
   1276                        case RPEDE_DATA_CHANGED_OK:
   1277                          {
   1278                            //Дані зазнали змін і є у діапазоні
   1279                            current_state_menu2.edition = ED_CAN_BE_EDITED;
   1280                            break;
   1281                          }
   1282                        case RPEDE_DATA_CHANGED_OUT_OF_RANGE:
   1283                          {
   1284                            //Дані зазнали змін але не є у діапазоні
   1285                            current_state_menu2.edition = ED_WARNING_ENTER_ESC;
   1286                            break;
   1287                          }
   1288                        case RPEDE_DATA_CHANGED_WRONG_RETURN_OK:
   1289                          {
   1290                            //Неможливо змінити конфігурацію приладу, але вдалося відновити попередню конфігурацію
   1291                            current_state_menu2.edition = ED_WARNING_ENTER;
   1292                            break;
   1293                          }
   1294                        }
   1295                      }
   1296                      else if (current_state_menu2.edition == ED_CONFIRM_CHANGES)
   1297                      {
   1298                        current_state_menu2.edition = /*prev_edit*/ED_CAN_BE_EDITED;
   1299                      }
   1300                      else if (current_state_menu2.edition == ED_WARNING_EDITION_BUSY)
   1301                      {
   1302                        current_state_menu2.edition = ED_VIEWING;
   1303                      }
   1304                      else if (current_state_menu2.edition == ED_WARNING_ENTER_ESC)
   1305                      {
   1306                        current_state_menu2.edition = ED_EDITION;
   1307                      }
   1308                      else if (current_state_menu2.edition == ED_WARNING_ENTER)
   1309                      {
   1310                        current_state_menu2.edition = ED_CAN_BE_EDITED;
   1311                      }
   1312          
   1313                      //Виставляємо біт обновлення екрану
   1314                      new_state_keyboard |= (1<<BIT_REWRITE);
   1315          
   1316                      //Очистити сигналізацію, що натиснута кнопка 
   1317                      new_state_keyboard &= (unsigned int)(~action);
   1318                    }
   1319                    else if ( (action = (new_state_keyboard & (1<<BIT_KEY_ESC))) !=0)
   1320                    {
   1321                      //Натиснута кнопка ESC
   1322                      if (current_state_menu2.func_press_esc != NULL) current_state_menu2.func_press_esc();
   1323          
   1324                      if (current_state_menu2.edition <= ED_CAN_BE_EDITED)
   1325                      {
   1326                        //Переходимо у попереднє меню
   1327                        current_state_menu2.current_level = previous_level_in_current_level_menu2[current_state_menu2.current_level];
   1328                        current_state_menu2.index_position = position_in_current_level_menu2[current_state_menu2.current_level];
   1329                        new_level_menu();
   1330                      }
   1331                      else
   1332                      {
   1333                        //Вихід у режимі редагування без введення змін
   1334                        current_state_menu2.edition = ED_CAN_BE_EDITED;
   1335                      }
   1336          
   1337                      //Виставляємо команду на обновлекння нового екрану
   1338                      new_state_keyboard |= (1<<BIT_REWRITE);
   1339          
   1340                      //Очистити сигналізацію, що натиснута кнопка 
   1341                      new_state_keyboard &= (unsigned int)(~action);
   1342                    }
   1343                    else
   1344                    {
   1345                      //Натиснуто зразу декілька кнопок - це є невизначена ситуація, тому скидаємо сигналізацію про натиснуті кнопки і чекаємо знову
   1346                      unsigned int temp_data = new_state_keyboard;
   1347                      new_state_keyboard &= ~temp_data;
   1348                    }
   1349                  }
   1350                    
   1351                  break;
   1352                }
   1353              default:
   1354                {
   1355                  //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1356                  total_error_sw_fixed(63);
   1357                }
   1358              }
   1359            }
   1360          }
   1361          /*****************************************************/
   1362          
   1363          /*****************************************************/
   1364          /*
   1365          Функція переміщення по меню (без винятків і додаткових алгоритмів)
   1366          
   1367          Вхідні параметри
   1368          (1 << BIT_REWRITE) - перемалювати меню
   1369          (1 << BIT_KEY_DOWN) - рухатися вниз
   1370          (1 << BIT_KEY_UP) - рухатися вверх
   1371          */
   1372          /*****************************************************/
   1373          void move_into_ekran_simple(unsigned int action, int max_row)
   1374          {
   1375            if (action & ((1 << BIT_REWRITE) | (1 << BIT_KEY_DOWN)))
   1376            {
   1377              if (action & (1 << BIT_KEY_DOWN)) current_state_menu2.index_position++;
   1378              if(current_state_menu2.index_position >= max_row) current_state_menu2.index_position = 0;
   1379            }
   1380            else if (action & (1 << BIT_KEY_UP))
   1381            {
   1382              if(--current_state_menu2.index_position < 0) current_state_menu2.index_position = max_row - 1;
   1383            }
   1384          }
   1385          /*****************************************************/
   1386          
   1387          /*****************************************************/
   1388          //Робимо повідомлення про те чи треба щоб зміни набули сили
   1389          /*****************************************************/
   1390          void make_ekran_ask_rewrite(void)
   1391          {
   1392            const uint8_t name_string[MAX_NAMBER_LANGUAGE][2][MAX_COL_LCD + 1] = 
   1393            {
   1394              {
   1395               "Ввести изменения",
   1396               "Да-ENTER Нет-ESC"
   1397              },
   1398              {
   1399               "  Ввести зміни  ",
   1400               "Так-ENTER Ні-ESC"
   1401              },
   1402              {
   1403               " Enter changes  ",
   1404               "Yes-ENTER No-ESC"
   1405              },
   1406              {
   1407               "Ввести изменения",
   1408               "Да-ENTER Нет-ESC"
   1409              }
   1410            };
   1411            int index_language = index_language_in_array(select_struct_settings_fix()->language);
   1412            
   1413            //Копіюємо  рядки у робочий екран
   1414            for (size_t i = 0; i < MAX_ROW_LCD; i++)
   1415            {
   1416              for (size_t j = 0; j < MAX_COL_LCD; j++) working_ekran[i][j] = name_string[index_language][i][j];
   1417            }
   1418            
   1419            //Курсор не видимий
   1420            current_state_menu2.cursor_on = 0;
   1421            //Курсор не мигає
   1422            current_state_menu2.cursor_blinking_on = 0;
   1423          }
   1424          /*****************************************************/
   1425          
   1426          
   1427          /*****************************************************/
   1428          //Формування вікна про помилку
   1429          /*****************************************************/
   1430          void make_ekran_about_info(unsigned int info_error, const uint8_t information[][MAX_COL_LCD + 1])
   1431          {
   1432            const uint8_t name_string_info[MAX_NAMBER_LANGUAGE][MAX_COL_LCD + 1] = 
   1433            {
   1434              "Продолжить:Enter",
   1435              "Продовжити:Enter",
   1436              " Continue: Enter",
   1437              "Продолжить:Enter"
   1438            };
   1439          
   1440            const uint8_t name_string_error[MAX_NAMBER_LANGUAGE][MAX_COL_LCD + 1] = 
   1441            {
   1442              "Повтор?Enter/Esc",
   1443              "Повтор?Enter/Esc",
   1444              "Repeat?Enter/Esc",
   1445              "Повтор?Enter/Esc"
   1446            };
   1447            const uint8_t (*p_name_string)[MAX_COL_LCD + 1];
   1448            if (info_error == false ) p_name_string = name_string_info;
   1449            else p_name_string = name_string_error;
   1450            
   1451            int index_language = index_language_in_array(select_struct_settings_fix()->language);
   1452            
   1453            //Копіюємо  рядки у робочий екран
   1454            for (size_t i = 0; i< MAX_ROW_LCD; i++)
   1455            {
   1456              for (size_t j = 0; j < MAX_COL_LCD; j++) working_ekran[i][j] = (i == 0) ? information[index_language][j] : p_name_string[index_language][j];
   1457            }
   1458            
   1459            //Курсор невидимий
   1460            current_state_menu2.cursor_on = 0;
   1461            //Курсор не мигає
   1462            current_state_menu2.cursor_blinking_on = 0;
   1463          }
   1464          /*****************************************************/
   1465          
   1466          /*****************************************************/
   1467          //Вираховуваня символу і поміщення його в робочий екран
   1468          /*****************************************************/
   1469          void calc_symbol_and_put_into_working_ekran(uint8_t* point_in_working_ekran, void* point_value, void* point_vaga, unsigned int* point_first_symbol, unsigned int current_position_x, unsigned int position_comma, unsigned int v_32_64)
   1470          {
   1471            unsigned int temp_data;
   1472            if (v_32_64 == 0)
   1473            {
   1474              temp_data = (*((uint32_t*)point_value)) / (*((uint32_t*)point_vaga)); //виділяємо число, яке треба перетворити у символ і помістити у дану позицію екрану
   1475              *((uint32_t*)point_value) %= *((uint32_t*)point_vaga); //вираховуємо число без символа, який ми зараз будемо виводити на екран
   1476              *((uint32_t*)point_vaga) /=10; //зменшуємо ваговий коефіцієнт в 10 разів
   1477            }
   1478            else
   1479            {
   1480              temp_data = (*((uint64_t*)point_value)) / (*((uint64_t*)point_vaga)); //виділяємо число, яке треба перетворити у символ і помістити у дану позицію екрану
   1481              *((uint64_t*)point_value) %= *((unsigned long long*)point_vaga); //вираховуємо число без символа, який ми зараз будемо виводити на екран
   1482              *((uint64_t*)point_vaga) /=10; //зменшуємо ваговий коефіцієнт в 10 разів
   1483            }
   1484            
   1485            if(current_state_menu2.edition == ED_EDITION) *point_in_working_ekran = temp_data + 0x30;
   1486            else
   1487            {
   1488              //У випадку, якщо ми не у режимі редагування, то нулі перед комою (за винятком останнього, якщо такий є) приховуємо
   1489              if ((temp_data !=0) || ((*point_first_symbol) != 0))
   1490              {
   1491                *point_in_working_ekran = temp_data + 0x30;
   1492                if ((*point_first_symbol) == 0) *point_first_symbol = 1;
   1493              }
   1494              else
   1495              {
   1496                if (current_position_x < (position_comma - 1) ) *point_in_working_ekran = ' ';
   1497                else
   1498                {
   1499                  *point_in_working_ekran = temp_data + 0x30;
   1500                  if ((*point_first_symbol) == 0) *point_first_symbol = 1;
   1501                }
   1502              }
   1503            }
   1504          }
   1505          /*****************************************************/
   1506          
   1507          /*****************************************************/
   1508          //Вираховуваня цілого символу і поміщення його в робочий екран
   1509          /*****************************************************/
   1510          void calc_int_symbol_and_put_into_working_ekran(uint8_t* point_in_working_ekran, uint32_t* point_value, uint32_t* point_vaga, unsigned int* point_first_symbol)
   1511          {
   1512            unsigned int temp_data;
   1513            temp_data = (*point_value) / (*point_vaga); //виділяємо число, яке треба перетворити у символ і помістити у дану позицію екрану
   1514            *point_value %= *(point_vaga); //вираховуємо число без символа, який ми зараз будемо виводити на екран
   1515            *point_vaga /=10; //зменшуємо ваговий коефіцієнт в 10 разів
   1516            if(current_state_menu2.edition >= ED_EDITION) *point_in_working_ekran = temp_data + 0x30;
   1517            else
   1518            {
   1519              //У випадку, якщо ми не у режимі редагування, то нулі перед найстаршим значущим числом приховуємо
   1520              if ((temp_data !=0) || ((*point_first_symbol) != 0))
   1521              {
   1522                *point_in_working_ekran = temp_data + 0x30;
   1523                if ((*point_first_symbol) == 0) *point_first_symbol = 1;
   1524              }
   1525              else
   1526              {
   1527                //Нуль виводимо тільки у тому випадку, якщо це є символ одиниць числа (текуча вага числа рівна 1)
   1528                if ((*point_vaga) >= 1 ) *point_in_working_ekran = ' ';
   1529                else
   1530                {
   1531                  *point_in_working_ekran = temp_data + 0x30;
   1532                  if ((*point_first_symbol) == 0) *point_first_symbol = 1;
   1533                }
   1534              }
   1535            }
   1536          }
   1537          /*****************************************************/
   1538          
   1539          /*****************************************************/
   1540          //Редагування величин вводимих значень
   1541          /*****************************************************
   1542          Вхідні параметри
   1543            0 - натснуто кнопку вниз
   1544            1 - натиснуто кнопку вверх
   1545          Вхідні параметри
   1546            Немає
   1547          *****************************************************/
   1548          unsigned int edit_setpoint(unsigned int action, uint32_t value, unsigned int floating_value, int comma, unsigned int end, unsigned int min_step)
   1549          {
   1550            unsigned int rozrjad, vaga = min_step, temp_value, data_return;
   1551            //Вираховуємо розряд числа на який зараз вказує курсор
   1552            rozrjad = end - current_state_menu2.position_cursor_x;
   1553            
   1554            //У разі якщо редаговане число є числом з комою, то враховуємо позицію коми
   1555            if (floating_value != 0)
   1556              if (current_state_menu2.position_cursor_x < comma) rozrjad--;
   1557                
   1558            for(size_t i = 0; i < rozrjad; i++)  vaga *= 10;
   1559            
   1560            //Виділяємо число , яке трба змінити
   1561            temp_value = (value / vaga) % 10;
   1562            
   1563            //У вхідному числі, який нас цікавить редагований розряд скидаємо в нуль відніманням
   1564            data_return = value - temp_value*vaga;
   1565            
   1566            //Змінюємо виділений розняд
   1567            inc_or_dec_value(&temp_value, action);
   1568            
   1569            //Вводимо зміненй розряд у кінцевий результат
   1570            data_return += temp_value*vaga;
   1571            
   1572            return data_return;
   1573          }
   1574          /*****************************************************/
   1575          
   1576          /*****************************************************/
   1577          //Збільшення або зменшення числа при натисканні кнопки
   1578          /*
   1579            Вхідні параменти
   1580            label_value - вказівник на змінюване  число
   1581            inc_dec 
   1582              0 - зменшити на одиницю
   1583              1 - збільшити на одиницю
   1584          */
   1585          /*****************************************************/
   1586          void inc_or_dec_value(unsigned int *label_value, unsigned int inc_dec)
   1587          {
   1588            int temp_value = *label_value;
   1589            
   1590            if(inc_dec == 0) temp_value--;
   1591            else if(inc_dec == 1) temp_value++;
   1592            
   1593            if(temp_value > 9) temp_value = 0;
   1594            else if(temp_value < 0) temp_value = 9;
   1595            
   1596            *label_value = temp_value;
   1597          }
   1598          /*****************************************************/
   1599          
   1600          /*****************************************************/
   1601          //Перевіряємо достовірність даних
   1602          /*
   1603          Результат
   1604            1 - дані достовірні
   1605            0 - дані недостовірні
   1606          */
   1607          /*****************************************************/
   1608          unsigned int check_data_setpoint(unsigned int current_value, unsigned int min_value, unsigned int max_value)
   1609          {
   1610            if ((current_value < min_value) || (current_value > max_value)) return 0;
   1611          
   1612            //Вихід з повідомленням, що уставко в межах допуску
   1613            return 1;
   1614          }
   1615          /*****************************************************/
   1616          
   1617          /*****************************************************/
   1618          //Зміна стану при зміні робочого екрану
   1619          /*****************************************************/
   1620          void new_level_menu(void)
   1621          {
   1622            switch (current_state_menu2.current_level)
   1623            {
   1624            case MAIN_MANU2_LEVEL:
   1625              {
   1626                current_state_menu2.p_max_row = NULL;
   1627                current_state_menu2.max_row = MAX_ROW_MAIN_M2;
   1628                current_state_menu2.func_move = move_into_main;
   1629                current_state_menu2.func_show = make_ekran_main;
   1630                current_state_menu2.func_press_enter = press_enter_in_main_and_list_passwords;
   1631                current_state_menu2.func_press_esc = NULL;
   1632                current_state_menu2.func_change = NULL;
   1633                current_state_menu2.binary_data = false;
   1634                current_state_menu2.edition = ED_VIEWING;
   1635          
   1636                break;
   1637              }
   1638            case TIME_MANU2_LEVEL:
   1639              {
   1640                time_rewrite = 0;
   1641                
   1642                current_state_menu2.p_max_row = NULL;
   1643                current_state_menu2.max_row = MAX_ROW_TIME_CALIBRATION_M2;
   1644                current_state_menu2.func_move = move_into_time;
   1645                current_state_menu2.func_show = make_ekran_time;
   1646                current_state_menu2.func_press_enter = press_enter_in_time;
   1647                current_state_menu2.func_press_esc = NULL;
   1648                current_state_menu2.func_change = change_time;
   1649                current_state_menu2.binary_data = false;
   1650                current_state_menu2.edition = ED_VIEWING;
   1651                break;
   1652              }
   1653            case MEASUREMENT_MENU2_LEVEL:
   1654              {
   1655                time_rewrite = 0;
   1656                
   1657                current_state_menu2.p_max_row = NULL;
   1658                current_state_menu2.max_row = MAX_ROW_FOR_MEASURMENT_ANALOG_INPUT;
   1659                current_state_menu2.func_move = move_into_ekran_simple;
   1660                current_state_menu2.func_show = make_ekran_measurement;
   1661                current_state_menu2.func_press_enter = NULL;
   1662                current_state_menu2.func_press_esc = NULL;
   1663                current_state_menu2.func_change = NULL;
   1664                current_state_menu2.binary_data = false;
   1665                current_state_menu2.edition = ED_VIEWING;
   1666                break;
   1667              }
   1668            case INPUTS_OUTPUTS_MENU2_LEVEL:
   1669              {
   1670                current_state_menu2.p_max_row = NULL;
   1671                current_state_menu2.max_row = MAX_ROW_INPUT_OUTPUT_M2;
   1672                current_state_menu2.func_move = move_into_ekran_simple;
   1673                current_state_menu2.func_show = make_ekran_list_inputs_outputs;
   1674                current_state_menu2.func_press_enter = NULL;
   1675                current_state_menu2.func_press_esc = NULL;
   1676                current_state_menu2.func_change = NULL;
   1677                current_state_menu2.binary_data = false;
   1678                current_state_menu2.edition = ED_VIEWING;
   1679                break;
   1680              }
   1681            case INPUTS_MENU2_LEVEL:
   1682            case OUTPUTS_MENU2_LEVEL:
   1683              {
   1684                time_rewrite = 0;
   1685                
   1686                if (current_state_menu2.current_level == INPUTS_MENU2_LEVEL) current_state_menu2.p_max_row = (int*)&current_config_prt.n_input;
   1687                else current_state_menu2.p_max_row = (int*)&current_config_prt.n_output;
   1688                current_state_menu2.max_row = 0;
   1689                current_state_menu2.func_move = move_into_ekran_input_or_output;
   1690                current_state_menu2.func_show = make_ekran_state_inputs_or_outputs;
   1691                current_state_menu2.func_press_enter = NULL;
   1692                current_state_menu2.func_press_esc = NULL;
   1693                current_state_menu2.func_change = NULL;
   1694                current_state_menu2.binary_data = false;
   1695                current_state_menu2.edition = ED_VIEWING;
   1696                break;
   1697              }
   1698            case REGISTRATORS_MENU2_LEVEL:
   1699              {
   1700                current_state_menu2.p_max_row = NULL;
   1701                current_state_menu2.max_row = MAX_ROW_LIST_REGISTRATORS_M2;
   1702                current_state_menu2.func_move = move_into_ekran_simple;
   1703                current_state_menu2.func_show = make_ekran_list_registrators;
   1704                current_state_menu2.func_press_enter = NULL;
   1705                current_state_menu2.func_press_esc = NULL;
   1706                current_state_menu2.func_change = NULL;
   1707                current_state_menu2.binary_data = false;
   1708                current_state_menu2.edition = ED_VIEWING;
   1709                break;
   1710              }
   1711            case LIST_SETTINGS_MENU2_LEVEL:
   1712              {
   1713                current_state_menu2.p_max_row = NULL;
   1714                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_M2;
   1715                current_state_menu2.func_move = move_into_list_settings;
   1716                current_state_menu2.func_show = make_ekran_list_settings;
   1717                current_state_menu2.func_press_enter = NULL;
   1718                current_state_menu2.func_press_esc = press_esc_in_list_settings;
   1719                current_state_menu2.func_change = NULL;
   1720                current_state_menu2.binary_data = false;
   1721                /*
   1722                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1723                відкритого вікна
   1724                */
   1725                break;
   1726              }
   1727            case CONFIGURATION_MENU2_LEVEL:
   1728              {
   1729                current_state_menu2.p_max_row = NULL;
   1730                current_state_menu2.max_row = MAX_ROW_FOR_CONFIGURATION;
   1731                current_state_menu2.func_move = move_into_ekran_simple;
   1732                current_state_menu2.func_show = make_ekran_configuration;
   1733                current_state_menu2.func_press_enter = press_enter_in_configuration;
   1734                current_state_menu2.func_press_esc = press_esc_in_configuration;
   1735                current_state_menu2.func_change = change_configuration;
   1736                current_state_menu2.binary_data = false;
   1737                /*
   1738                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1739                відкритого вікна
   1740                */
   1741                break;
   1742              }
   1743            case LIST_INPUTS_MENU2_LEVEL:
   1744            case LIST_OUTPUTS_MENU2_LEVEL:
   1745            case LIST_LEDS_MENU2_LEVEL:
   1746            case LIST_ALARMS_MENU2_LEVEL:
   1747            case LIST_GROUP_ALARMS_MENU2_LEVEL:
   1748            case LIST_TIMERS_MENU2_LEVEL:
   1749            case LIST_MEANDERS_MENU2_LEVEL:
   1750            case PARAM_LIST_SELECTED_LOGICAL_NODES_MENU2_LEVEL:
   1751              {
   1752                __CONFIG *p_config = (current_state_menu2.edition == ED_VIEWING) ? &current_config_prt : &current_config;
   1753                if (current_state_menu2.current_level == PARAM_LIST_SELECTED_LOGICAL_NODES_MENU2_LEVEL)
   1754                {
   1755                  int *p_number[NUMBER_VAR_BLOCKS] = 
   1756                  {
   1757                    (int*)&p_config->n_input, 
   1758                    (int*)&p_config->n_output,
   1759                    (int*)&p_config->n_led, 
   1760                    (int*)&p_config->n_alarm,
   1761                    (int*)&p_config->n_group_alarm,
   1762                    (int*)&p_config->n_and,
   1763                    (int*)&p_config->n_or,
   1764                    (int*)&p_config->n_xor,
   1765                    (int*)&p_config->n_not,
   1766                    (int*)&p_config->n_timer,
   1767                    (int*)&p_config->n_trigger,
   1768                    (int*)&p_config->n_meander
   1769                  };
   1770          
   1771                  intptr_t index = position_in_current_level_menu2[previous_level_in_current_level_menu2[current_state_menu2.current_level]] - NUMBER_FIX_BLOCKS; 
   1772                  current_state_menu2.p_max_row = p_number[index];
   1773                  
   1774                  current_state_menu2.index_position = 0;
   1775                }
   1776                else
   1777                {
   1778                  switch (current_state_menu2.current_level)
   1779                  {
   1780                  case LIST_INPUTS_MENU2_LEVEL:
   1781                    {
   1782                      current_state_menu2.p_max_row =(int*)&p_config->n_input;
   1783                      break;
   1784                    }
   1785                  case LIST_OUTPUTS_MENU2_LEVEL:
   1786                    {
   1787                      current_state_menu2.p_max_row = (int*)&p_config->n_output;
   1788                      break;
   1789                    }
   1790                  case LIST_LEDS_MENU2_LEVEL:
   1791                    {
   1792                      current_state_menu2.p_max_row = (int*)&p_config->n_led;
   1793                      break;
   1794                    }
   1795                  case LIST_ALARMS_MENU2_LEVEL:
   1796                    {
   1797                      current_state_menu2.p_max_row = (int*)&p_config->n_alarm;
   1798                      break;
   1799                    }
   1800                  case LIST_GROUP_ALARMS_MENU2_LEVEL:
   1801                    {
   1802                      current_state_menu2.p_max_row = (int*)&p_config->n_group_alarm;
   1803                      break;
   1804                    }
   1805                  case LIST_TIMERS_MENU2_LEVEL:
   1806                    {
   1807                      current_state_menu2.p_max_row = (int*)&p_config->n_timer;
   1808                      break;
   1809                    }
   1810                  case LIST_MEANDERS_MENU2_LEVEL:
   1811                    {
   1812                      current_state_menu2.p_max_row = (int*)&p_config->n_meander;
   1813                      break;
   1814                    }
   1815                  default:
   1816                    {
   1817                      //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1818                      total_error_sw_fixed(104);
   1819                    }
   1820                  }
   1821                }
   1822                current_state_menu2.max_row = 0;
   1823                current_state_menu2.func_move = move_into_ekran_simple;
   1824                current_state_menu2.func_show = make_ekran_list_logical_nodes;
   1825                current_state_menu2.func_press_enter = NULL;
   1826                current_state_menu2.func_press_esc = NULL;
   1827                current_state_menu2.func_change = NULL;
   1828                current_state_menu2.binary_data = false;
   1829                /*
   1830                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1831                відкритого вікна
   1832                */
   1833                break;
   1834              }
   1835            case LIST_SETTINGS_GROUP_ALARM_MENU2_LEVEL:
   1836              {
   1837                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_group_alarm : (int*)&current_config.n_group_alarm;
   1838                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_PDC_M2;
   1839                current_state_menu2.index_position = 0;
   1840                current_state_menu2.func_move = move_into_ekran_simple;
   1841                current_state_menu2.func_show = make_ekran_choose_pickup_delay_control;
   1842                current_state_menu2.func_press_enter = NULL;
   1843                current_state_menu2.func_press_esc = NULL;
   1844                current_state_menu2.func_change = NULL;
   1845                current_state_menu2.binary_data = false;
   1846                /*
   1847                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1848                відкритого вікна
   1849                */
   1850                break;
   1851              }
   1852            case LIST_SETTINGS_INPUT_MENU2_LEVEL:
   1853            case LIST_SETTINGS_ALARM_MENU2_LEVEL:
   1854              {
   1855                switch (current_state_menu2.current_level)
   1856                {
   1857                  case LIST_SETTINGS_INPUT_MENU2_LEVEL:
   1858                    {
   1859                      current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_input : (int*)&current_config.n_input;
   1860                      break;
   1861                    }
   1862                  case LIST_SETTINGS_ALARM_MENU2_LEVEL:
   1863                    {
   1864                      current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_alarm : (int*)&current_config.n_alarm;
   1865                      break;
   1866                    }
   1867                default:
   1868                  {
   1869                    //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1870                    total_error_sw_fixed(47);
   1871                  }
   1872                }
   1873                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_DC_M2;
   1874                current_state_menu2.index_position = 0;
   1875                current_state_menu2.func_move = move_into_ekran_simple;
   1876                current_state_menu2.func_show = make_ekran_choose_delay_control;
   1877                current_state_menu2.func_press_enter = NULL;
   1878                current_state_menu2.func_press_esc = NULL;
   1879                current_state_menu2.func_change = NULL;
   1880                current_state_menu2.binary_data = false;
   1881                /*
   1882                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1883                відкритого вікна
   1884                */
   1885                break;
   1886              }
   1887            case LIST_SETTINGS_TIMER_MENU2_LEVEL:
   1888            case LIST_SETTINGS_MEANDER_MENU2_LEVEL:
   1889              {
   1890                switch (current_state_menu2.current_level)
   1891                {
   1892                case LIST_SETTINGS_TIMER_MENU2_LEVEL:
   1893                  {
   1894                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_timer : (int*)&current_config.n_timer;
   1895                    break;
   1896                  }
   1897                case LIST_SETTINGS_MEANDER_MENU2_LEVEL:
   1898                  {
   1899                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_meander : (int*)&current_config.n_meander;
   1900                    break;
   1901                  }
   1902                default:
   1903                  {
   1904                    //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1905                    total_error_sw_fixed(105);
   1906                  }
   1907                }
   1908                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_D_M2;
   1909                current_state_menu2.index_position = 0;
   1910                current_state_menu2.func_move = move_into_ekran_simple;
   1911                current_state_menu2.func_show = make_ekran_choose_delay;
   1912                current_state_menu2.func_press_enter = NULL;
   1913                current_state_menu2.func_press_esc = NULL;
   1914                current_state_menu2.func_change = NULL;
   1915                current_state_menu2.binary_data = false;
   1916                /*
   1917                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1918                відкритого вікна
   1919                */
   1920                break;
   1921              }
   1922            case LIST_SETTINGS_OUTPUT_MENU2_LEVEL:
   1923            case LIST_SETTINGS_LED_MENU2_LEVEL:
   1924              {
   1925                switch (current_state_menu2.current_level)
   1926                {
   1927                case LIST_SETTINGS_OUTPUT_MENU2_LEVEL:
   1928                  {
   1929                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_output : (int*)&current_config.n_output;
   1930                    break;
   1931                  }
   1932                case LIST_SETTINGS_LED_MENU2_LEVEL:
   1933                  {
   1934                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_led : (int*)&current_config.n_led;
   1935                    break;
   1936                  }
   1937                default:
   1938                  {
   1939                    //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   1940                    total_error_sw_fixed(106);
   1941                  }
   1942                }
   1943                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_C_M2;
   1944                current_state_menu2.index_position = 0;
   1945                current_state_menu2.func_move = move_into_ekran_simple;
   1946                current_state_menu2.func_show = make_ekran_choose_control;
   1947                current_state_menu2.func_press_enter = NULL;
   1948                current_state_menu2.func_press_esc = NULL;
   1949                current_state_menu2.func_change = NULL;
   1950                current_state_menu2.binary_data = false;
   1951                /*
   1952                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1953                відкритого вікна
   1954                */
   1955                break;
   1956              }
   1957            case DELAY_ALARM_MENU2_LEVEL:
   1958              {
   1959                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_alarm : (int*)&current_config.n_alarm;
   1960                current_state_menu2.max_row = ALARM_SET_DELAYS;
   1961                current_state_menu2.func_move = move_into_ekran_simple;
   1962                current_state_menu2.func_show = make_ekran_delay_alarm;
   1963                current_state_menu2.func_press_enter = press_enter_in_delay_alarm;
   1964                current_state_menu2.func_press_esc = press_esc_in_delay_alarm;
   1965                current_state_menu2.func_change = change_delay_alarm;
   1966                current_state_menu2.binary_data = false;
   1967                /*
   1968                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1969                відкритого вікна
   1970                */
   1971                break;
   1972              }
   1973            case CTRL_ALARM_MENU2_LEVEL:
   1974              {
   1975                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_alarm : (int*)&current_config.n_alarm;
   1976                current_state_menu2.max_row = MAX_INDEX_CTRL_ALARM;
   1977                current_state_menu2.func_move = move_into_ekran_simple;
   1978                current_state_menu2.func_show = make_ekran_control_alarm;
   1979                current_state_menu2.func_press_enter = press_enter_in_control_alarm;
   1980                current_state_menu2.func_press_esc = press_esc_in_control_alarm;
   1981                current_state_menu2.func_change = change_control_alarm;
   1982                current_state_menu2.binary_data = true;
   1983                /*
   1984                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   1985                відкритого вікна
   1986                */
   1987                break;
   1988              }
   1989            case PICKUP_GROUP_ALARM_MENU2_LEVEL:
   1990              {
   1991                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_group_alarm : (int*)&current_config.n_group_alarm;
   1992                current_state_menu2.max_row = GROUP_ALARM_PICKUPS;
   1993                current_state_menu2.func_move = move_into_ekran_simple;
   1994                current_state_menu2.func_show = make_ekran_pickup_group_alarm;
   1995                current_state_menu2.func_press_enter = press_enter_in_pickup_group_alarm;
   1996                current_state_menu2.func_press_esc = press_esc_in_pickup_group_alarm;
   1997                current_state_menu2.func_change = change_pickup_group_alarm;
   1998                current_state_menu2.binary_data = false;
   1999                /*
   2000                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2001                відкритого вікна
   2002                */
   2003                break;
   2004              }
   2005            case DELAY_GROUP_ALARM_MENU2_LEVEL:
   2006              {
   2007                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_group_alarm : (int*)&current_config.n_group_alarm;
   2008                current_state_menu2.max_row = GROUP_ALARM_SET_DELAYS;
   2009                current_state_menu2.func_move = move_into_ekran_simple;
   2010                current_state_menu2.func_show = make_ekran_delay_group_alarm;
   2011                current_state_menu2.func_press_enter = press_enter_in_delay_group_alarm;
   2012                current_state_menu2.func_press_esc = press_esc_in_delay_group_alarm;
   2013                current_state_menu2.func_change = change_delay_group_alarm;
   2014                current_state_menu2.binary_data = false;
   2015                /*
   2016                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2017                відкритого вікна
   2018                */
   2019                break;
   2020              }
   2021            case CTRL_GROUP_ALARM_MENU2_LEVEL:
   2022              {
   2023                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_group_alarm : (int*)&current_config.n_group_alarm;
   2024                current_state_menu2.max_row = MAX_INDEX_CTRL_GROUP_ALARM;
   2025                current_state_menu2.func_move = move_into_ekran_simple;
   2026                current_state_menu2.func_show = make_ekran_control_group_alarm;
   2027                current_state_menu2.func_press_enter = press_enter_in_control_group_alarm;
   2028                current_state_menu2.func_press_esc = press_esc_in_control_group_alarm;
   2029                current_state_menu2.func_change = change_control_group_alarm;
   2030                current_state_menu2.binary_data = true;
   2031                /*
   2032                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2033                відкритого вікна
   2034                */
   2035                break;
   2036              }
   2037            case DELAY_TIMER_MENU2_LEVEL:
   2038              {
   2039                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_timer : (int*)&current_config.n_timer;
   2040                current_state_menu2.max_row = TIMER_SET_DELAYS;
   2041                current_state_menu2.func_move = move_into_ekran_simple;
   2042                current_state_menu2.func_show = make_ekran_delay_timer;
   2043                current_state_menu2.func_press_enter = press_enter_in_delay_timer;
   2044                current_state_menu2.func_press_esc = press_esc_in_delay_timer;
   2045                current_state_menu2.func_change = change_delay_timer;
   2046                current_state_menu2.binary_data = false;
   2047                /*
   2048                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2049                відкритого вікна
   2050                */
   2051                break;
   2052              }
   2053            case DELAY_MEANDER_MENU2_LEVEL:
   2054              {
   2055                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_meander : (int*)&current_config.n_meander;
   2056                current_state_menu2.max_row = MAX_INDEX_DELAY_MEANDER;
   2057                current_state_menu2.func_move = move_into_ekran_simple;
   2058                current_state_menu2.func_show = make_ekran_delay_meander;
   2059                current_state_menu2.func_press_enter = press_enter_in_delay_meander;
   2060                current_state_menu2.func_press_esc = press_esc_in_delay_meander;
   2061                current_state_menu2.func_change = change_delay_meander;
   2062                current_state_menu2.binary_data = false;
   2063                /*
   2064                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2065                відкритого вікна
   2066                */
   2067                break;
   2068              }
   2069            case LIST_SETTINGS_BIOS_MENU2_LEVEL:
   2070              {
   2071                current_state_menu2.p_max_row = NULL;
   2072                current_state_menu2.max_row = MAX_ROW_LIST_SETTINGS_BIOS_M2;
   2073                current_state_menu2.func_move = move_into_list_settings_bios;
   2074                current_state_menu2.func_show = make_ekran_list_settings_bios;
   2075                current_state_menu2.func_press_enter = NULL;
   2076                current_state_menu2.func_press_esc = NULL;
   2077                current_state_menu2.func_change = NULL;
   2078                current_state_menu2.binary_data = false;
   2079                /*
   2080                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2081                відкритого вікна
   2082                */
   2083                break;
   2084              }
   2085            case DELAY_INPUT_MENU2_LEVEL:
   2086              {
   2087                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_input : (int*)&current_config.n_input;
   2088                current_state_menu2.max_row = INPUT_SET_DELAYS;
   2089                current_state_menu2.func_move = move_into_ekran_simple;
   2090                current_state_menu2.func_show = make_ekran_delay_input;
   2091                current_state_menu2.func_press_enter = press_enter_in_delay_input;
   2092                current_state_menu2.func_press_esc = press_esc_in_delay_input;
   2093                current_state_menu2.func_change = change_delay_input;
   2094                current_state_menu2.binary_data = false;
   2095                /*
   2096                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2097                відкритого вікна
   2098                */
   2099                break;
   2100              }
   2101            case CTRL_INPUT_MENU2_LEVEL:
   2102              {
   2103                current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_input : (int*)&current_config.n_input;
   2104                current_state_menu2.max_row = MAX_INDEX_CTRL_INPUT;
   2105                current_state_menu2.func_move = move_into_ekran_simple;
   2106                current_state_menu2.func_show = make_ekran_control_input;
   2107                current_state_menu2.func_press_enter = press_enter_in_control_input;
   2108                current_state_menu2.func_press_esc = press_esc_in_control_input;
   2109                current_state_menu2.func_change = change_control_input;
   2110                current_state_menu2.binary_data = true;
   2111                /*
   2112                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2113                відкритого вікна
   2114                */
   2115                break;
   2116              }
   2117            case CTRL_OUTPUT_MENU2_LEVEL:
   2118            case CTRL_LED_MENU2_LEVEL:
   2119              {
   2120                switch (current_state_menu2.current_level)
   2121                {
   2122                case CTRL_OUTPUT_MENU2_LEVEL:
   2123                  {
   2124                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_output : (int*)&current_config.n_output;
   2125                    break;
   2126                  }
   2127                case CTRL_LED_MENU2_LEVEL:
   2128                  {
   2129                    current_state_menu2.p_max_row = (current_state_menu2.edition == ED_VIEWING) ? (int*)&current_config_prt.n_led : (int*)&current_config.n_led;
   2130                    break;
   2131                  }
   2132                default:
   2133                  {
   2134                    //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   2135                    total_error_sw_fixed(107);
   2136                  }
   2137                }
   2138                current_state_menu2.max_row = MAX_INDEX_CTRL_OUTPUT_LED;
   2139                current_state_menu2.func_move = move_into_ekran_simple;
   2140                current_state_menu2.func_show = make_ekran_control_output_led;
   2141                current_state_menu2.func_press_enter = press_enter_in_control_output_led;
   2142                current_state_menu2.func_press_esc = press_esc_in_control_output_led;
   2143                current_state_menu2.func_change = change_control_output_led;
   2144                current_state_menu2.binary_data = true;
   2145                /*
   2146                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2147                відкритого вікна
   2148                */
   2149                break;
   2150              }
   2151            case PARAM_LIST_LOGICAL_NODES_MENU2_LEVEL:
   2152              {
   2153                current_state_menu2.p_max_row = NULL;
   2154                current_state_menu2.max_row = MAX_ROW_FOR_PARAM_LIST_LOGICAL_NODES;
   2155                current_state_menu2.func_move = move_into_param_list_logical_nodes;
   2156                current_state_menu2.func_show = make_ekran_param_list_logical_node;
   2157                current_state_menu2.func_press_enter = NULL;
   2158                current_state_menu2.func_press_esc = NULL;
   2159                current_state_menu2.func_change = NULL;
   2160                current_state_menu2.binary_data = false;
   2161                /*
   2162                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2163                відкритого вікна
   2164                */
   2165                break;
   2166              }
   2167            case LANGUAGE_MENU2_LEVEL:
   2168              {
   2169                current_state_menu2.p_max_row = NULL;
   2170                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_SETTING_LANGUAGE;
   2171                current_state_menu2.func_move = move_into_ekran_simple;
   2172                current_state_menu2.func_show = make_ekran_setting_language;
   2173                current_state_menu2.func_press_enter = press_enter_in_setting_language;
   2174                current_state_menu2.func_press_esc = press_esc_in_setting_language;
   2175                current_state_menu2.func_change = change_setting_language;
   2176                current_state_menu2.binary_data = true;
   2177                /*
   2178                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2179                відкритого вікна
   2180                */
   2181                break;
   2182              }
   2183            case LIST_SETTINGS_COMMUNIACATION_PARAMETERS_MENU2_LEVEL:
   2184              {
   2185                current_state_menu2.p_max_row = NULL;
   2186                current_state_menu2.max_row = MAX_ROW_CHCP_M2;
   2187                current_state_menu2.func_move = move_into_ekran_simple;
   2188                current_state_menu2.func_show = make_ekran_choose_communication_parameters;
   2189                current_state_menu2.func_press_enter = NULL;
   2190                current_state_menu2.func_press_esc = NULL;
   2191                current_state_menu2.func_change = NULL;
   2192                current_state_menu2.binary_data = false;
   2193                /*
   2194                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2195                відкритого вікна
   2196                */
   2197                break;
   2198              }
   2199            case NAME_OF_CELL_MENU2_LEVEL:
   2200              {
   2201                current_state_menu2.p_max_row = NULL;
   2202                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_NAME_OF_CELL;
   2203                current_state_menu2.func_move = move_into_ekran_simple;
   2204                current_state_menu2.func_show = make_ekran_name_of_cell;
   2205                current_state_menu2.func_press_enter = NULL;
   2206                current_state_menu2.func_press_esc = NULL;
   2207                current_state_menu2.func_change = NULL;
   2208                current_state_menu2.binary_data = false;
   2209                /*
   2210                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2211                відкритого вікна
   2212                */
   2213                break;
   2214              }
   2215            case ADDRESS_MENU2_LEVEL:
   2216              {
   2217                current_state_menu2.p_max_row = NULL;
   2218                current_state_menu2.max_row = MAX_ROW_ADDRESS_M2;
   2219                current_state_menu2.func_move = move_into_ekran_simple;
   2220                current_state_menu2.func_show = make_ekran_address;
   2221                current_state_menu2.func_press_enter = press_enter_in_address;
   2222                current_state_menu2.func_press_esc = press_esc_in_address;
   2223                current_state_menu2.func_change = change_address;
   2224                current_state_menu2.binary_data = false;
   2225                /*
   2226                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2227                відкритого вікна
   2228                */
   2229                break;
   2230              }
   2231            case SETTINGS_RS485_MENU2_LEVEL:
   2232              {
   2233                current_state_menu2.p_max_row = NULL;
   2234                current_state_menu2.max_row = MAX_ROW_SETTING_RS485_M2;
   2235                current_state_menu2.func_move = move_into_ekran_simple;
   2236                current_state_menu2.func_show = make_ekran_choose_setting_RS485;
   2237                current_state_menu2.func_press_enter = NULL;
   2238                current_state_menu2.func_press_esc = NULL;
   2239                current_state_menu2.func_change = NULL;
   2240                current_state_menu2.binary_data = false;
   2241                /*
   2242                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2243                відкритого вікна
   2244                */
   2245                break;
   2246              }
   2247            case BAUD_RS485_MENU2_LEVEL:
   2248              {
   2249                current_state_menu2.p_max_row = NULL;
   2250                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_BAUD_RS485;
   2251                current_state_menu2.func_move = move_into_ekran_simple;
   2252                current_state_menu2.func_show = make_ekran_baud_RS485;
   2253                current_state_menu2.func_press_enter = press_enter_in_baud_RS485;
   2254                current_state_menu2.func_press_esc = press_esc_in_baud_RS485;
   2255                current_state_menu2.func_change = change_baud_RS485;
   2256                current_state_menu2.binary_data = true;
   2257                /*
   2258                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2259                відкритого вікна
   2260                */
   2261                break;
   2262              }
   2263            case PARE_RS485_MENU2_LEVEL:
   2264              {
   2265                current_state_menu2.p_max_row = NULL;
   2266                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_PARE_RS485;
   2267                current_state_menu2.func_move = move_into_ekran_simple;
   2268                current_state_menu2.func_show = make_ekran_pare_RS485;
   2269                current_state_menu2.func_press_enter = press_enter_in_pare_RS485;
   2270                current_state_menu2.func_press_esc = press_esc_in_pare_RS485;
   2271                current_state_menu2.func_change = change_pare_RS485;
   2272                current_state_menu2.binary_data = true;
   2273                /*
   2274                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2275                відкритого вікна
   2276                */
   2277                break;
   2278              }
   2279            case STOP_BITS_RS485_MENU2_LEVEL:
   2280              {
   2281                current_state_menu2.p_max_row = NULL;
   2282                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_STOP_BITS_RS485;
   2283                current_state_menu2.func_move = move_into_ekran_simple;
   2284                current_state_menu2.func_show = make_ekran_stopbits_RS485;
   2285                current_state_menu2.func_press_enter = press_enter_in_stopbits_RS485;
   2286                current_state_menu2.func_press_esc = press_esc_in_stopbits_RS485;
   2287                current_state_menu2.func_change = change_stopbits_RS485;
   2288                current_state_menu2.binary_data = true;
   2289                /*
   2290                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2291                відкритого вікна
   2292                */
   2293                break;
   2294              }
   2295            case TIMEOUT_RS485_MENU2_LEVEL:
   2296              {
   2297                current_state_menu2.p_max_row = NULL;
   2298                current_state_menu2.max_row = MAX_ROW_FOR_VIEW_TIMEOUT_RS485;
   2299                current_state_menu2.func_move = move_into_ekran_simple;
   2300                current_state_menu2.func_show = make_ekran_timeout_RS485;
   2301                current_state_menu2.func_press_enter = press_enter_in_timeout_RS485;
   2302                current_state_menu2.func_press_esc = press_esc_in_timeout_RS485;
   2303                current_state_menu2.func_change = change_timeout_RS485;
   2304                current_state_menu2.binary_data = false;
   2305                /*
   2306                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2307                відкритого вікна
   2308                */
   2309                break;
   2310              }
   2311            case LIST_PASSWORDS_MENU2_LEVEL:
   2312              {
   2313                current_state_menu2.p_max_row = NULL;
   2314                current_state_menu2.max_row = MAX_ROW_LIST_PASSWORDS_M2;
   2315                current_state_menu2.func_move = move_into_ekran_simple;
   2316                current_state_menu2.func_show = make_ekran_choose_passwords;
   2317                current_state_menu2.func_press_enter = press_enter_in_main_and_list_passwords;
   2318                current_state_menu2.func_press_esc = NULL;
   2319                current_state_menu2.func_change = NULL;
   2320                current_state_menu2.binary_data = false;
   2321                /*
   2322                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2323                відкритого вікна
   2324                */
   2325                break;
   2326              }
   2327            case DIAGNOSTICS_MENU2_LEVEL:
   2328              {
   2329                time_rewrite = 0;
   2330                
   2331                current_state_menu2.p_max_row = NULL;
   2332                current_state_menu2.max_row = MAX_ROW_FOR_DIAGNOSTYKA;
   2333                current_state_menu2.func_move = move_into_diagnostics;
   2334                current_state_menu2.func_show = make_ekran_diagnostics;
   2335                current_state_menu2.func_press_enter = NULL;
   2336                current_state_menu2.func_press_esc = NULL;
   2337                current_state_menu2.func_change = NULL;
   2338                current_state_menu2.binary_data = false;
   2339                current_state_menu2.edition = ED_VIEWING;
   2340                break;
   2341              }
   2342            case LABELS_MENU2_LEVEL:
   2343              {
   2344                current_state_menu2.p_max_row = NULL;
   2345                current_state_menu2.max_row = MAX_ROW_LABELS_M2;
   2346                current_state_menu2.func_move = move_into_ekran_simple;
   2347                current_state_menu2.func_show = make_ekran_list_labels;
   2348                current_state_menu2.func_press_enter = NULL;
   2349                current_state_menu2.func_press_esc = NULL;
   2350                current_state_menu2.func_change = NULL;
   2351                current_state_menu2.binary_data = false;
   2352                current_state_menu2.edition = ED_VIEWING;
   2353                break;
   2354              }
   2355            case CONFIG_LABEL_MENU2_LEVEL:
   2356            case SETTINGS_LABEL_MENU2_LEVEL:
   2357              {
   2358                current_state_menu2.p_max_row = NULL;
   2359                current_state_menu2.max_row = MAX_ROW_TIME_CONFIG_OR_SETTINGS;
   2360                current_state_menu2.func_move = move_into_ekran_simple;
   2361                current_state_menu2.func_show = make_ekran_time_config_or_settings;
   2362                current_state_menu2.func_press_enter = NULL;
   2363                current_state_menu2.func_press_esc = NULL;
   2364                current_state_menu2.func_change = NULL;
   2365                current_state_menu2.binary_data = false;
   2366                current_state_menu2.edition = ED_VIEWING;
   2367                break;
   2368              }
   2369            case INFO_MENU2_LEVEL:
   2370              {
   2371                current_state_menu2.p_max_row = NULL;
   2372                current_state_menu2.max_row = MAX_ROW_INFO_M2;
   2373                current_state_menu2.func_move = move_into_ekran_simple;
   2374                current_state_menu2.func_show = make_ekran_info;
   2375                current_state_menu2.func_press_enter = NULL;
   2376                current_state_menu2.func_press_esc = NULL;
   2377                current_state_menu2.func_change = NULL;
   2378                current_state_menu2.binary_data = false;
   2379                current_state_menu2.edition = ED_VIEWING;
   2380                break;
   2381              }
   2382            case DATE_TIME_INFO_MENU2_LEVEL:
   2383              {
   2384                current_state_menu2.p_max_row = NULL;
   2385                current_state_menu2.max_row = MAX_ROW_FOR_DATE_TIME_PZ;
   2386                current_state_menu2.func_move = move_into_ekran_simple;
   2387                current_state_menu2.func_show = make_ekran_date_time_pz;
   2388                current_state_menu2.func_press_enter = NULL;
   2389                current_state_menu2.func_press_esc = NULL;
   2390                current_state_menu2.func_change = NULL;
   2391                current_state_menu2.binary_data = false;
   2392                current_state_menu2.edition = ED_VIEWING;
   2393                break;
   2394              }
   2395            case PASSWORD_MENU2_LEVEL:
   2396            case SET_NEW_PASSWORD_MENU2_LEVEL:
   2397              {
   2398                current_state_menu2.p_max_row = NULL;
   2399                current_state_menu2.max_row = MAX_ROW_PASSWORD_M2;
   2400                current_state_menu2.func_move = NULL;
   2401                current_state_menu2.func_show = make_ekran_password;
   2402                current_state_menu2.func_press_enter = NULL;
   2403                current_state_menu2.func_press_esc = NULL;
   2404                current_state_menu2.func_change = NULL;
   2405                current_state_menu2.binary_data = false;
   2406                /*
   2407                current_state_menu2.edition не встановлюємо бо він залежить від поперднього 
   2408                відкритого вікна
   2409                */
   2410                break;
   2411              }
   2412            default:
   2413              {
   2414                //Якщо сюди дійшла програма, значить відбулася недопустива помилка, тому треба зациклити програму, щоб вона пішла на перезагрузку
   2415                total_error_sw_fixed(64);
   2416              }
   2417            }
   2418          }
   2419          /*****************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   calc_int_symbol_and_put_into_working_ekran
      40   calc_symbol_and_put_into_working_ekran
        40 __aeabi_uldivmod
       0   check_data_setpoint
      48   edit_setpoint
        48   -> inc_or_dec_value
       0   inc_or_dec_value
     240   main_manu_function_ver2
       240   -- Indirect call
       240   -> __aeabi_memcpy4
       240   -> index_language_in_array
       240   -> new_level_menu
       240   -> select_struct_settings_fix
       240   -> set_config_and_settings
       240   -> total_error_sw_fixed
     160   make_ekran_about_info
       160   -> __aeabi_memcpy4
       160   -> index_language_in_array
       160   -> select_struct_settings_fix
     144   make_ekran_ask_rewrite
       144   -> __aeabi_memcpy4
       144   -> index_language_in_array
       144   -> select_struct_settings_fix
       0   move_into_ekran_simple
      56   new_level_menu
        56   -> total_error_sw_fixed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_28
       4  ??DataTable7_29
       4  ??DataTable7_3
       4  ??DataTable7_30
       4  ??DataTable7_31
       4  ??DataTable7_32
       4  ??DataTable7_33
       4  ??DataTable7_34
       4  ??DataTable7_35
       4  ??DataTable7_36
       4  ??DataTable7_37
       4  ??DataTable7_38
       4  ??DataTable7_39
       4  ??DataTable7_4
       4  ??DataTable7_40
       4  ??DataTable7_41
       4  ??DataTable7_42
       4  ??DataTable7_43
       4  ??DataTable7_44
       4  ??DataTable7_45
       4  ??DataTable7_46
       4  ??DataTable7_47
       4  ??DataTable7_48
       4  ??DataTable7_49
       4  ??DataTable7_5
       4  ??DataTable7_50
       4  ??DataTable7_51
       4  ??DataTable7_52
       4  ??DataTable7_53
       4  ??DataTable7_54
       4  ??DataTable7_55
       4  ??DataTable7_56
       4  ??DataTable7_57
       4  ??DataTable7_58
       4  ??DataTable7_59
       4  ??DataTable7_6
       4  ??DataTable7_60
       4  ??DataTable7_61
       4  ??DataTable7_62
       4  ??DataTable7_63
       4  ??DataTable7_64
       4  ??DataTable7_65
       4  ??DataTable7_66
       4  ??DataTable7_67
       4  ??DataTable7_68
       4  ??DataTable7_69
       4  ??DataTable7_7
       4  ??DataTable7_70
       4  ??DataTable7_71
       4  ??DataTable7_72
       4  ??DataTable7_73
       4  ??DataTable7_74
       4  ??DataTable7_75
       4  ??DataTable7_76
       4  ??DataTable7_77
       4  ??DataTable7_78
       4  ??DataTable7_79
       4  ??DataTable7_8
       4  ??DataTable7_80
       4  ??DataTable7_81
       4  ??DataTable7_82
       4  ??DataTable7_83
       4  ??DataTable7_84
       4  ??DataTable7_85
       4  ??DataTable7_86
       4  ??DataTable7_87
       4  ??DataTable7_88
       4  ??DataTable7_89
       4  ??DataTable7_9
       4  ??DataTable7_90
       4  ??DataTable7_91
       4  ??DataTable7_92
       4  ??DataTable7_93
       4  ??DataTable7_94
       4  ??DataTable7_95
       4  ??DataTable7_96
       4  ??DataTable7_97
       4  ??DataTable7_98
       4  ??DataTable7_99
       8  ?_0
       2  ?_1
       4  ?_10
       1  ?_11
       1  ?_12
       4  ?_13
       4  ?_14
       2  ?_15
       2  ?_16
     136  ?_17
     136  ?_18
      68  ?_19
       2  ?_2
      68  ?_20
       2  ?_3
      12  ?_4
       4  ?_5
       2  ?_6
       1  ?_7
       1  ?_8
       2  ?_9
     114  calc_int_symbol_and_put_into_working_ekran
     226  calc_symbol_and_put_into_working_ekran
      18  check_data_setpoint
     108  edit_setpoint
      38  inc_or_dec_value
    6112  main_manu_function_ver2
     120  make_ekran_about_info
      86  make_ekran_ask_rewrite
      72  move_into_ekran_simple
    4092  new_level_menu
       4  new_password
       4  number_symbols
       4  number_symbols
      12  previous_state_cursor

 
     24 bytes in section .bss
    462 bytes in section .rodata
 11 514 bytes in section .text
 
 11 514 bytes of CODE  memory
    462 bytes of CONST memory
     24 bytes of DATA  memory

Errors: none
Warnings: none
