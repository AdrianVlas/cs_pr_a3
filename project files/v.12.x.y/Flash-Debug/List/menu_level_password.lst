###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       24/Mar/2017  12:54:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\src\menu_level_password.c
#    Command line =  
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\src\menu_level_password.c" -D USE_STDPERIPH_DRIVER -D STM32F2XX
#        -D USE_USB_OTG_FS -D KEYBOARD_VER_1 -D SYSTEM_VIEWER_ENABLE -lc
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List" --remarks -o
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --enable_multibytes --fpu=None
#        --dlib_config G:\PRG\IAR7_50_2\arm\INC\c\DLib_Config_Full.h -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\usb\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Core\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\"
#        -I "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\Config\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\OS\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\SEGGER\" -On --use_c++_inline
#        --require_prototypes -I G:\PRG\IAR7_50_2\arm\CMSIS\Include\ -D
#        ARM_MATH_CM3
#    List file    =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List\menu_level_password.lst
#    Object file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj\menu_level_password.o
#
###############################################################################

G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working files\src\menu_level_password.c
      1          #include "header.h"
      2          
      3          /*****************************************************/
      4          //Формуємо екран паролю
      5          /*****************************************************/
      6          void make_ekran_password(void)
      7          {
      8            const uint8_t name_string_1[MAX_NAMBER_LANGUAGE][MAX_COL_LCD + 1] = 
      9            {
     10              " Введите пароль:",
     11              " Введіть пароль:",
     12              " Enter password:",
     13              " Введите пароль:"
     14            };
     15          
     16            const uint8_t name_string_2[MAX_NAMBER_LANGUAGE][MAX_COL_LCD + 1] = 
     17            {
     18              "  Новый пароль: ",
     19              "  Новий пароль: ",
     20              "  New password: ",
     21              "  Новый пароль: "
     22            };
     23          
     24            //Визначаємо з яким масивом будемо працювати
     25            const uint8_t (*point_to_working_array)[MAX_COL_LCD + 1];
     26            if (current_state_menu2.current_level == SET_NEW_PASSWORD_MENU2_LEVEL)
     27              point_to_working_array = name_string_2;
     28            else
     29              point_to_working_array = name_string_1;
     30          
     31            uint8_t name_string_tmp[MAX_ROW_FOR_LEVEL_PASSWORD][MAX_COL_LCD + 1];
     32          
     33            int index_language = index_language_in_array(select_struct_settings_fix()->language);
     34            
     35            for(size_t index_1 = 0; index_1 < MAX_ROW_FOR_LEVEL_PASSWORD; index_1++)
     36            {
     37              for(size_t index_2 = 0; index_2 < (MAX_COL_LCD + 1); index_2++)
     38              {
     39                name_string_tmp[index_1][index_2] = (index_1 == INDEX_PASSWORD_M2_LINE1) ? point_to_working_array[index_language][index_2] : ' ';
     40              }
     41            }
     42            
     43            unsigned int password = *((unsigned int*)p_menu_param_1);
     44            if (*((unsigned int*)p_menu_param_2) != 0)
     45            {
     46              unsigned int position_cursor = COL_NEW_PASSWORD_BEGIN;
     47              if (password != 0)
     48              {
     49                unsigned int temp_value[MAX_NUMBER_OF_SYMPOLS_IN_PASSWORD];
     50                unsigned int password_tmp = (unsigned int)password;
     51          
     52                for (intptr_t i = (MAX_NUMBER_OF_SYMPOLS_IN_PASSWORD - 1); i >= 0; i--)
     53                {
     54                  temp_value[i] = password_tmp % 10;
     55                  password_tmp /= 10;
     56                }
     57          
     58                for (size_t i = 0; i < MAX_NUMBER_OF_SYMPOLS_IN_PASSWORD; i++)
     59                {
     60                  if(temp_value[i] != 0) name_string_tmp[INDEX_PASSWORD_M2_LINE2][position_cursor++] = temp_value[i] + 0x30;
     61                }
     62              }
     63              else
     64              {
     65                name_string_tmp[INDEX_PASSWORD_M2_LINE2][position_cursor++] = (current_state_menu2.current_level == SET_NEW_PASSWORD_MENU2_LEVEL) ? '0' : '?';
     66              }
     67            }
     68          
     69            //Копіюємо  рядки у робочий екран
     70            for (unsigned int i=0; i< MAX_ROW_LCD; i++)
     71            {
     72              for (unsigned int j = 0; j<MAX_COL_LCD; j++) working_ekran[i][j] = name_string_tmp[i][j];
     73            }
     74            
     75            //Відображення курору по вертикалі
     76            current_state_menu2.position_cursor_y = 1;
     77            //Курсор видимий
     78            current_state_menu2.cursor_on = 1;
     79            //Курсор мигає
     80            current_state_menu2.cursor_blinking_on = 1;
     81            //Обновити повністю весь екран
     82            current_state_menu2.current_action = ACTION_WITH_CARRENT_EKRANE_FULL_UPDATE;
     83          }
     84          /*****************************************************/
     85          
     86          /*****************************************************/
     87          //Формуємо екран відображення заголовків паролів
     88          /*****************************************************/
     89          void make_ekran_choose_passwords(void)
     90          {
     91            if (current_state_menu2.edition == ED_WARNING_EDITION_BUSY)
     92            {
     93              const uint8_t information_about_info[MAX_NAMBER_LANGUAGE][MAX_COL_LCD + 1] = 
     94              {
     95                "Ред.не разрешено",
     96                "Ред.не дозволене",
     97                "Ed.isn't allowed",
     98                "Ред.не разрешено",
     99              };
    100              make_ekran_about_info(false, information_about_info);
    101            }
    102            else
    103            {
    104              const uint8_t password_item[MAX_ROW_LIST_PASSWORDS_M2][MAX_NAMBER_LANGUAGE][2][MAX_COL_LCD + 1] = 
    105              {
    106                {
    107                  {" Смена пароля 1 ", " Уст.пароля 1   "},
    108                  {" Зміна паролю 1 ", " Вст.паролю 1   "},
    109                  {" Pass.1 Change  ", " Password 1 Set "},
    110                  {" Смена пароля 1 ", " Уст.пароля 1   "}
    111                },
    112                {
    113                  {" Смена пароля 2 ", " Уст.пароля 2   "},
    114                  {" Зміна паролю 2 ", " Вст.паролю 2   "},
    115                  {" Pass.2 Change  ", " Password 2 Set "},
    116                  {" Смена пароля 2 ", " Уст.пароля 2   "}
    117                },
    118              };
    119              int index_language = index_language_in_array(select_struct_settings_fix()->language);
    120            
    121              unsigned int position_temp = current_state_menu2.index_position;
    122              unsigned int index_in_ekran = (position_temp >> POWER_MAX_ROW_LCD) << POWER_MAX_ROW_LCD;
    123          
    124              __SETTINGS_FIX *p_settings_fix;
    125              p_settings_fix = (current_state_menu2.edition == ED_VIEWING) ? &settings_fix_prt : &settings_fix;
    126              
    127              //Копіюємо  рядки у робочий екран
    128              for (size_t i = 0; i < MAX_ROW_LCD; i++)
    129              {
    130                if (index_in_ekran < MAX_ROW_LIST_PASSWORDS_M2)
    131                {
    132                  unsigned int password;
    133                  if (index_in_ekran == INDEX_LIST_PASSWORDS_M2_1)
    134                    password = p_settings_fix->password_1;
    135                  else
    136                    password = p_settings_fix->password_2;
    137                
    138                  unsigned int index_of_information = ( password != 0) ? 0 : 1;
    139                  for (size_t j = 0; j < MAX_COL_LCD; j++) working_ekran[i][j] = password_item[index_in_ekran][index_language][index_of_information][j];
    140                } 
    141                else
    142                  for (size_t j = 0; j < MAX_COL_LCD; j++) working_ekran[i][j] = ' ';
    143          
    144                index_in_ekran++;
    145              }
    146          
    147              //Курсор по горизонталі відображається на першій позиції
    148              current_state_menu2.position_cursor_x = 0;
    149              //Відображення курору по вертикалі
    150              current_state_menu2.position_cursor_y = position_temp & (MAX_ROW_LCD - 1);
    151              //Курсор видимий
    152              current_state_menu2.cursor_on = 1;
    153              //Курсор не мигає
    154              current_state_menu2.cursor_blinking_on = 0;
    155            }
    156            //Обновити повністю весь екран
    157            current_state_menu2.current_action = ACTION_WITH_CARRENT_EKRANE_FULL_UPDATE;
    158          }
    159          /*****************************************************/
    160          
    161          /*****************************************************/
    162          // 
    163          /*****************************************************/
    164          /*****************************************************/
    165          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     360   make_ekran_choose_passwords
       360   -> __aeabi_memcpy4
       360   -> index_language_in_array
       360   -> make_ekran_about_info
       360   -> select_struct_settings_fix
     208   make_ekran_password
       208   -> __aeabi_memcpy4
       208   -> index_language_in_array
       208   -> select_struct_settings_fix


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      68  ?_0
      68  ?_1
      68  ?_2
     272  ?_3
     232  make_ekran_choose_passwords
     282  make_ekran_password

 
 476 bytes in section .rodata
 554 bytes in section .text
 
 554 bytes of CODE  memory
 476 bytes of CONST memory

Errors: none
Warnings: none
