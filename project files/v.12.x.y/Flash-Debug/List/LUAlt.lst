###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.2.10312/W32 for ARM       24/Mar/2017  12:54:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\v_A_shm\LUAlt.cpp
#    Command line =  
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working
#        files\v_A_shm\LUAlt.cpp" -D USE_STDPERIPH_DRIVER -D STM32F2XX -D
#        USE_USB_OTG_FS -D SYSTEM_VIEWER_ENABLE -lc
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List" -lB
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List" --remarks -o
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --enable_multibytes --fpu=None
#        --dlib_config G:\PRG\IAR7_50_2\arm\INC\c\DLib_Config_Full.h -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\working files\usb\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Core\inc\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\"
#        -I "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\Config\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\OS\" -I
#        "G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\..\..\SystemView\SEGGER\" -On --eec++ -I
#        G:\PRG\IAR7_50_2\arm\CMSIS\Include\ -D ARM_MATH_CM3
#    List file    =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\List\LUAlt.lst
#    Object file  =  
#        G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\project
#        files\v.12.x.y\Flash-Debug\Obj\LUAlt.o
#
###############################################################################

G:\emb_pj\CS_Demo\demo3\cs_pr_a\Device-2.12.x.y\working files\v_A_shm\LUAlt.cpp
      1          
      2          #include "LUAlt.hpp"
      3          
      4          CPulseAlternator::CPulseAlternator(void) :CLUBase() {
      5          m_chLinkedTimers = 0; //Field bit
      6          m_chStateT       = 0;
      7          m_PulseAltCfgSuit.shTAlternator = 0;
      8          m_NodeTicAlt.lTmrVal = 0;
      9          m_NodeTicAlt.next    = 0;
     10          }
     11          
     12          CPulseAlternator::~CPulseAlternator(void) {
     13          }
     14          
     15          
     16          CPulseAlternator::CPulseAlternator(char chM,char chI)  {
     17          	chMaxIteratoin = chM;
     18          	chIteration = chI;
     19          	
     20          chNumInput  = static_cast<char>(shCLUPulseAlternator_x_y_AmtIn);//
     21          chNumOutput = static_cast<char>(shCLUPulseAlternator_x_y_AmtOut);
     22          	
     23          }
     24          void CPulseAlternator::UpdateCPulseAlt(void){
     25          //Set Input parameters
     26          pIn = static_cast<void*>(arrPchIn);
     27          //Set OutPut parameters
     28          pOut = static_cast<void*>(arrOut);
     29          //LinkMftTimers();
     30          //pInit2LcVarArea->pCLUBase->shShemasIdLUStng =  STNG_LU_NOT;
     31          
     32          //Set Operation
     33          //Set Type Operation
     34          }
     35          long CPulseAlternator::LinkPulseAltTimer(void) {
     36              register long i = 0;
     37              //Insert TpauseMft
     38              chGlSem++;
     39              
     40              if (PushTmrNode(&m_NodeTicAlt)) {//static_cast<void*>(
     41                  i++;
     42                  m_chLinkedTimers |= 2;
     43              }
     44          
     45              
     46              chGlSem--;
     47              return i;
     48          }
     49          long CPulseAlternator::TAlt(long lActivKey){
     50            
     51              register long *plTmrVal = &m_NodeTicAlt.lTmrVal;
     52              if (lActivKey) {
     53          	
     54          	} else {
     55                  ;
     56                  m_chStateT = 0;
     57                  *plTmrVal = 0; //m_NodeTpause.lTmrVal = 0;
     58              }
     59              return 0;
     60          }
     61          void PulseAlt_Op(void *pObj){
     62          
     63              register long i, j;
     64          
     65          	CPulseAlternator& rPulseAlt = *(static_cast<CPulseAlternator*>(pObj));
     66          	j = 0;
     67          	i = rPulseAlt.TAlt(j);
     68          	
     69          rPulseAlt.arrOut[0] = static_cast<char>(i);
     70          
     71          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CPulseAlternator::CPulseAlternator()
         8   -> CLUBase::subobject CLUBase()
      16   CPulseAlternator::CPulseAlternator(char, char)
        16   -> CLUBase::subobject CLUBase()
      16   CPulseAlternator::LinkPulseAltTimer()
        16   -> PushTmrNode
       0   CPulseAlternator::TAlt(long)
       0   CPulseAlternator::UpdateCPulseAlt()
       8   CPulseAlternator::subobject CPulseAlternator()
         8   -> CPulseAlternator::CPulseAlternator()
       8   CPulseAlternator::subobject CPulseAlternator(char, char)
         8   -> CPulseAlternator::CPulseAlternator(char, char)
       8   CPulseAlternator::subobject ~CPulseAlternator()
         8   -> CPulseAlternator::~CPulseAlternator()
       8   CPulseAlternator::~CPulseAlternator()
         8   -> CLUBase::subobject ~CLUBase()
      16   PulseAlt_Op(void *)
        16   -> CPulseAlternator::TAlt(long)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      34  CPulseAlternator::CPulseAlternator()
      30  CPulseAlternator::CPulseAlternator(char, char)
      52  CPulseAlternator::LinkPulseAltTimer()
      22  CPulseAlternator::TAlt(long)
      14  CPulseAlternator::UpdateCPulseAlt()
      12  CPulseAlternator::subobject CPulseAlternator()
      16  CPulseAlternator::subobject CPulseAlternator(char, char)
      12  CPulseAlternator::subobject ~CPulseAlternator()
      14  CPulseAlternator::~CPulseAlternator()
      22  PulseAlt_Op(void *)

 
 232 bytes in section .text
 
 232 bytes of CODE memory

Errors: none
Warnings: none
