#ifndef __CONST_DRIVER_SERIAL_FLASH__
#define __CONST_DRIVER_SERIAL_FLASH__

enum _task_spi_df_bit
{
  TASK_READ_SR_DF_BIT = 0,

  TASK_START_MAKE_PAGE_SIZE_256_BIT,
  TASK_MAKING_PAGE_SIZE_256_BIT,

  TASK_START_ERASE_DATAFLASH_BIT,
  TASK_ERASING_DATAFLASH_BIT,

  TASK_START_WRITE_SERIAL_DATAFLASH_BIT,
  TASK_WRITING_SERIAL_DATAFLASH_BIT,

  TASK_START_READ_SERIAL_DATAFLASH_BIT,
  TASK_READING_SERIAL_DATAFLASH_BIT
};

/*DataFlash*/
#define CODE_OPERATION_STATUS_READ                            0xD7
#define CODE_OPERATION_READ_HIGH_FREQ                         0x0B
#define CODE_OPERATION_WRITE_PAGE_THROUGH_BUFFER              0x82
#define CODE_OPERATION_READ_PAGE_INTO_BUFFER                  0x53
#define CODE_OPERATION_WRITE_BUFFER                           0x84
#define CODE_OPERATION_WRITE_BUFFER_INTO_MEMORY_WITH_ERASE    0x83

#define ETAP_WRITING_DF_NONE                                             -1
#define ETAP_WRITING_DF_MAIN_MEMORY_PROGRAM_THROUGH_BUFFER               (ETAP_WRITING_DF_NONE + 1)
#define ETAP_WRITING_DF_MAIN_MEMORY_TO_BUFFER_TRANSFER                   (ETAP_WRITING_DF_MAIN_MEMORY_PROGRAM_THROUGH_BUFFER + 1)
#define ETAP_WRITING_DF_BUFFER_WRITE                                     (ETAP_WRITING_DF_MAIN_MEMORY_TO_BUFFER_TRANSFER + 1)
#define ETAP_WRITING_DF_BUFFER_TO_MAIN_MEMORY_PROGRAM_WITH_BUIT_IN_ERASE (ETAP_WRITING_DF_BUFFER_WRITE + 1)
  
enum _index_dataflash
{
  INDEX_DATAFLASH_1 = 0,
  INDEX_DATAFLASH_2,
  
  NUMBER_DATAFLASH_CHIP
};

#define VAGA_SIZE_PAGE_DATAFLASH_1      8 //ц€ константа потр≥бна т≥льки дл€ того, щоб можна було легко множити на 256 ≥ д≥лити на 256
#define SIZE_PAGE_DATAFLASH_1           (1 << VAGA_SIZE_PAGE_DATAFLASH_1) //256 байт
#define NUMBER_PAGES_INTO_DATAFLASH_1   512

#define VAGA_SIZE_PAGE_DATAFLASH_2      9 //ц€ константа потр≥бна т≥льки дл€ того, щоб можна було легко множити на 512 ≥ д≥лити на 512
#define SIZE_PAGE_DATAFLASH_2           (1 << VAGA_SIZE_PAGE_DATAFLASH_2) //512 байт
#define NUMBER_PAGES_INTO_DATAFLASH_2   4096

#if SIZE_PAGE_DATAFLASH_2 >= SIZE_PAGE_DATAFLASH_1
#define SIZE_PAGE_DATAFLASH_MAX         SIZE_PAGE_DATAFLASH_2
#else
#define SIZE_PAGE_DATAFLASH_MAX         SIZE_PAGE_DATAFLASH_1
#endif

#define SIZE_BUFFER_SERIAL_DATAFLASH_READ_WRITE      (2*SIZE_PAGE_DATAFLASH_MAX)
#define SIZE_BUFFER_SERIAL_DATAFLASH_DMA             (SIZE_BUFFER_SERIAL_DATAFLASH_READ_WRITE + 10)


#define NUMBER_PAGES_INTO_LOG            480
#define NUMBER_PAGES_INTO_PR_ERR        (NUMBER_PAGES_INTO_DATAFLASH_1 - NUMBER_PAGES_INTO_LOG)

#define MIN_ADDRESS_LOG_AREA                  0x0
#define SIZE_LOG_AREA                         (NUMBER_PAGES_INTO_LOG << VAGA_SIZE_PAGE_DATAFLASH_1)
#define MAX_ADDRESS_LOG_AREA                  (MIN_ADDRESS_LOG_AREA + SIZE_LOG_AREA - 1)
#define MAX_ADDRESS_LOG_AREA_WORK             (MAX_ADDRESS_LOG_AREA)

#define SIZE_ONE_RECORD_PR_ERR                10
#define MAX_NUMBER_RECORDS_PR_ERR_INTO_BUFFER 32 //максимальнак≥льк≥сть запис≥в в буфер≥ типу FIFO, €к≥ чекають на запису DataFlash
#define SIZE_BUFFER_FOR_PR_ERR                (SIZE_ONE_RECORD_PR_ERR*MAX_NUMBER_RECORDS_PR_ERR_INTO_BUFFER)
#define MIN_ADDRESS_PR_ERR_AREA               (MAX_ADDRESS_LOG_AREA + 1)
#define SIZE_PR_ERR_AREA                      (NUMBER_PAGES_INTO_PR_ERR << VAGA_SIZE_PAGE_DATAFLASH_1)
#define MAX_ADDRESS_PR_ERR_AREA               (MIN_ADDRESS_PR_ERR_AREA + SIZE_PR_ERR_AREA - 1)
#define MAX_ADDRESS_PR_ERR_AREA_WORK          (MAX_ADDRESS_PR_ERR_AREA - (SIZE_PR_ERR_AREA % SIZE_ONE_RECORD_PR_ERR))
#define MAX_NUMBER_RECORDS_INTO_PR_ERR        (SIZE_PR_ERR_AREA / SIZE_ONE_RECORD_PR_ERR)

#define TRANSACTION_EXECUTING_NONE              0
#define TRANSACTION_EXECUTING                   1
#define TRANSACTION_EXECUTED_WAIT_ANALIZE       2
#define TRANSACTION_EXECUTED_ERROR              3

enum _task_df_bit
{
  TASK_ERASE_DATAFLASH_1_BIT = 0,
  TASK_WRITE_PR_ERR_RECORDS_INTO_DATAFLASH_BIT,
  TASK_MAMORY_READ_DATAFLASH_FOR_PR_ERR_MENU_BIT,
  TASK_MAMORY_READ_DATAFLASH_FOR_PR_ERR_USB_BIT,
  TASK_MAMORY_READ_DATAFLASH_FOR_PR_ERR_RS485_BIT,
  
  _SEPARATOR_BIT_TASKS_DATADLASH1_AND_TASKS_DATADLASH2,
  
  TASK_ERASE_DATAFLASH_2_BIT = _SEPARATOR_BIT_TASKS_DATADLASH1_AND_TASKS_DATADLASH2
};

#define LABEL_START_RECORD_PR_ERR       0x5A

#define CLEAN_PR_ERR_BIT      0
#define CLEAN_PR_ERR          (1 << CLEAN_PR_ERR_BIT)

#endif
